[
  {
    "__docId__": 1,
    "kind": "external",
    "name": "Infinity",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Infinity",
    "memberof": "components/.external-ecmascript.js",
    "static": true,
    "longname": "components/.external-ecmascript.js~Infinity",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 2,
    "kind": "external",
    "name": "NaN",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/NaN",
    "memberof": "components/.external-ecmascript.js",
    "static": true,
    "longname": "components/.external-ecmascript.js~NaN",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 3,
    "kind": "external",
    "name": "undefined",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined",
    "memberof": "components/.external-ecmascript.js",
    "static": true,
    "longname": "components/.external-ecmascript.js~undefined",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 4,
    "kind": "external",
    "name": "null",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/null",
    "memberof": "components/.external-ecmascript.js",
    "static": true,
    "longname": "components/.external-ecmascript.js~null",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 5,
    "kind": "external",
    "name": "Object",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",
    "memberof": "components/.external-ecmascript.js",
    "static": true,
    "longname": "components/.external-ecmascript.js~Object",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 6,
    "kind": "external",
    "name": "object",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",
    "memberof": "components/.external-ecmascript.js",
    "static": true,
    "longname": "components/.external-ecmascript.js~object",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 7,
    "kind": "external",
    "name": "Function",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",
    "memberof": "components/.external-ecmascript.js",
    "static": true,
    "longname": "components/.external-ecmascript.js~Function",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 8,
    "kind": "external",
    "name": "function",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",
    "memberof": "components/.external-ecmascript.js",
    "static": true,
    "longname": "components/.external-ecmascript.js~function",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 9,
    "kind": "external",
    "name": "Boolean",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
    "memberof": "components/.external-ecmascript.js",
    "static": true,
    "longname": "components/.external-ecmascript.js~Boolean",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 10,
    "kind": "external",
    "name": "boolean",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
    "memberof": "components/.external-ecmascript.js",
    "static": true,
    "longname": "components/.external-ecmascript.js~boolean",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 11,
    "kind": "external",
    "name": "Symbol",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol",
    "memberof": "components/.external-ecmascript.js",
    "static": true,
    "longname": "components/.external-ecmascript.js~Symbol",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 12,
    "kind": "external",
    "name": "Error",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error",
    "memberof": "components/.external-ecmascript.js",
    "static": true,
    "longname": "components/.external-ecmascript.js~Error",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 13,
    "kind": "external",
    "name": "EvalError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/EvalError",
    "memberof": "components/.external-ecmascript.js",
    "static": true,
    "longname": "components/.external-ecmascript.js~EvalError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 14,
    "kind": "external",
    "name": "InternalError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/InternalError",
    "memberof": "components/.external-ecmascript.js",
    "static": true,
    "longname": "components/.external-ecmascript.js~InternalError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 15,
    "kind": "external",
    "name": "RangeError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RangeError",
    "memberof": "components/.external-ecmascript.js",
    "static": true,
    "longname": "components/.external-ecmascript.js~RangeError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 16,
    "kind": "external",
    "name": "ReferenceError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ReferenceError",
    "memberof": "components/.external-ecmascript.js",
    "static": true,
    "longname": "components/.external-ecmascript.js~ReferenceError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 17,
    "kind": "external",
    "name": "SyntaxError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SyntaxError",
    "memberof": "components/.external-ecmascript.js",
    "static": true,
    "longname": "components/.external-ecmascript.js~SyntaxError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 18,
    "kind": "external",
    "name": "TypeError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError",
    "memberof": "components/.external-ecmascript.js",
    "static": true,
    "longname": "components/.external-ecmascript.js~TypeError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 19,
    "kind": "external",
    "name": "URIError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/URIError",
    "memberof": "components/.external-ecmascript.js",
    "static": true,
    "longname": "components/.external-ecmascript.js~URIError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 20,
    "kind": "external",
    "name": "Number",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",
    "memberof": "components/.external-ecmascript.js",
    "static": true,
    "longname": "components/.external-ecmascript.js~Number",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 21,
    "kind": "external",
    "name": "number",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",
    "memberof": "components/.external-ecmascript.js",
    "static": true,
    "longname": "components/.external-ecmascript.js~number",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 22,
    "kind": "external",
    "name": "Date",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date",
    "memberof": "components/.external-ecmascript.js",
    "static": true,
    "longname": "components/.external-ecmascript.js~Date",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 23,
    "kind": "external",
    "name": "String",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",
    "memberof": "components/.external-ecmascript.js",
    "static": true,
    "longname": "components/.external-ecmascript.js~String",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 24,
    "kind": "external",
    "name": "string",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",
    "memberof": "components/.external-ecmascript.js",
    "static": true,
    "longname": "components/.external-ecmascript.js~string",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 25,
    "kind": "external",
    "name": "RegExp",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp",
    "memberof": "components/.external-ecmascript.js",
    "static": true,
    "longname": "components/.external-ecmascript.js~RegExp",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 26,
    "kind": "external",
    "name": "Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array",
    "memberof": "components/.external-ecmascript.js",
    "static": true,
    "longname": "components/.external-ecmascript.js~Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 27,
    "kind": "external",
    "name": "Int8Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int8Array",
    "memberof": "components/.external-ecmascript.js",
    "static": true,
    "longname": "components/.external-ecmascript.js~Int8Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 28,
    "kind": "external",
    "name": "Uint8Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array",
    "memberof": "components/.external-ecmascript.js",
    "static": true,
    "longname": "components/.external-ecmascript.js~Uint8Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 29,
    "kind": "external",
    "name": "Uint8ClampedArray",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8ClampedArray",
    "memberof": "components/.external-ecmascript.js",
    "static": true,
    "longname": "components/.external-ecmascript.js~Uint8ClampedArray",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 30,
    "kind": "external",
    "name": "Int16Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int16Array",
    "memberof": "components/.external-ecmascript.js",
    "static": true,
    "longname": "components/.external-ecmascript.js~Int16Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 31,
    "kind": "external",
    "name": "Uint16Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint16Array",
    "memberof": "components/.external-ecmascript.js",
    "static": true,
    "longname": "components/.external-ecmascript.js~Uint16Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 32,
    "kind": "external",
    "name": "Int32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int32Array",
    "memberof": "components/.external-ecmascript.js",
    "static": true,
    "longname": "components/.external-ecmascript.js~Int32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 33,
    "kind": "external",
    "name": "Uint32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint32Array",
    "memberof": "components/.external-ecmascript.js",
    "static": true,
    "longname": "components/.external-ecmascript.js~Uint32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 34,
    "kind": "external",
    "name": "Float32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float32Array",
    "memberof": "components/.external-ecmascript.js",
    "static": true,
    "longname": "components/.external-ecmascript.js~Float32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 35,
    "kind": "external",
    "name": "Float64Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float64Array",
    "memberof": "components/.external-ecmascript.js",
    "static": true,
    "longname": "components/.external-ecmascript.js~Float64Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 36,
    "kind": "external",
    "name": "Map",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map",
    "memberof": "components/.external-ecmascript.js",
    "static": true,
    "longname": "components/.external-ecmascript.js~Map",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 37,
    "kind": "external",
    "name": "Set",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set",
    "memberof": "components/.external-ecmascript.js",
    "static": true,
    "longname": "components/.external-ecmascript.js~Set",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 38,
    "kind": "external",
    "name": "WeakMap",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakMap",
    "memberof": "components/.external-ecmascript.js",
    "static": true,
    "longname": "components/.external-ecmascript.js~WeakMap",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 39,
    "kind": "external",
    "name": "WeakSet",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakSet",
    "memberof": "components/.external-ecmascript.js",
    "static": true,
    "longname": "components/.external-ecmascript.js~WeakSet",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 40,
    "kind": "external",
    "name": "ArrayBuffer",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer",
    "memberof": "components/.external-ecmascript.js",
    "static": true,
    "longname": "components/.external-ecmascript.js~ArrayBuffer",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 41,
    "kind": "external",
    "name": "DataView",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView",
    "memberof": "components/.external-ecmascript.js",
    "static": true,
    "longname": "components/.external-ecmascript.js~DataView",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 42,
    "kind": "external",
    "name": "JSON",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON",
    "memberof": "components/.external-ecmascript.js",
    "static": true,
    "longname": "components/.external-ecmascript.js~JSON",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 43,
    "kind": "external",
    "name": "Promise",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise",
    "memberof": "components/.external-ecmascript.js",
    "static": true,
    "longname": "components/.external-ecmascript.js~Promise",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 44,
    "kind": "external",
    "name": "Generator",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Generator",
    "memberof": "components/.external-ecmascript.js",
    "static": true,
    "longname": "components/.external-ecmascript.js~Generator",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 45,
    "kind": "external",
    "name": "GeneratorFunction",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/GeneratorFunction",
    "memberof": "components/.external-ecmascript.js",
    "static": true,
    "longname": "components/.external-ecmascript.js~GeneratorFunction",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 46,
    "kind": "external",
    "name": "Reflect",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect",
    "memberof": "components/.external-ecmascript.js",
    "static": true,
    "longname": "components/.external-ecmascript.js~Reflect",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 47,
    "kind": "external",
    "name": "Proxy",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy",
    "memberof": "components/.external-ecmascript.js",
    "static": true,
    "longname": "components/.external-ecmascript.js~Proxy",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 48,
    "kind": "file",
    "name": "components/App.js",
    "content": "/**\n * Sample React Native App\n * https://github.com/facebook/react-native\n * reference: https://stackoverflow.com/questions/51607886/react-native-json-fetch-from-url\n * https://github.com/react-native-community/react-native-side-menu\n * https://stackoverflow.com/questions/30448547/how-to-model-a-button-with-icons-in-react-native\n * https://github.com/oblador/react-native-vector-icons\n * https://github.com/react-native-community/react-native-maps/blob/master/docs/installation.md\n * https://www.igismap.com/switching-between-google-maps-and-openstreetmap-in-react-native/\n * https://stackoverflow.com/questions/39395404/react-native-import-the-whole-file-split-js-code-into-several-files\n *\n * @format\n * @flow\n * @lint-ignore-every XPLATJSCOPYRIGHT1\n */\n\nimport React, {Component} from 'react';\nimport {Button} from 'react-native';\nimport {Platform, StyleSheet, Text, View, TouchableOpacity} from 'react-native';\nimport SideMenu from 'react-native-side-menu';\nimport RoundButton from './components/RoundButton/RoundButton';\nimport IconButton from './components/IconButton/IconButton';\nimport GroundMapView from './components/GroundMapView/GroundMapView';\nimport SearchBar from './components/SearchBar/SearchBar';\nimport SlidingUpDetailView\n  from './components/SlidingUpDetailView/SlidingUpDetailView';\nimport Directory\n  from './components/Directory/Directory';\nimport PDFMap\n  from './components/PDFMap/PDFMap';\nimport Icon from 'react-native-vector-icons/FontAwesome';\nimport {createStackNavigator, createAppContainer} from 'react-navigation';\nimport {Keyboard} from 'react-native';\nimport NavigationSwipeView from './components/NavigationSwipeView/NavigationSwipeView';\nimport {positions, styles} from './styles';\n\n/**\n * HomeScreen that gets rendered first when everything is loaded\n * Consists of a Sidemenu, a MainView, and a hamburger button that toggles\n * Sidemenu/MainView\n */\nclass HomeScreen extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      sideMenuIsOpen: false,\n      sideMenuDisableGesture: true,\n      apiServerURL: 'http://a.tile.openstreetmap.de/tiles/osmde/{z}/{x}/{y}.png',\n      navigateGround: false,\n      navigateTo: null,\n      hideHamburgerButton: false,\n    };\n\n\n    this.toggleSideBar = this.toggleSideBar.bind(this);\n    this.shouldHideHamburgerButton = this.shouldHideHamburgerButton.bind(this);\n  }\n\n  toggleSideBar() {\n    this.setState({sideMenuIsOpen: !this.state.sideMenuIsOpen});\n    Keyboard.dismiss();\n  }\n\n  componentDidMount() {\n    console.disableYellowBox = true;\n  }\n\n  shouldHideHamburgerButton(inputStatus) {\n    this.setState({hideHamburgerButton: inputStatus});\n  }\n\n  /**\n   * renders a sidemenu and the mainView in the SideMenu component\n   * @returns {*}\n   */\n  render() {\n    const {navigate} = this.props.navigation;\n\n    return (\n      <SideMenu\n        menu={(this.state.sideMenuIsOpen)?(\n            <View style={{flex: 1, backgroundColor: '#a9a9a9', paddingTop: 50, alignItems: 'center'}}>\n              <Icon style={{fontSize: 85}} name = 'home'/>\n              <TouchableOpacity\n                style={styles.sideButton}\n                onPress={() => navigate('FoodDirectory')}>\n                <Text style={styles.item}>\n                  <Icon name=\"info-circle\" style={styles.item}/>\n                  Directory\n                </Text>\n              </TouchableOpacity>\n              <TouchableOpacity\n                style={styles.sideButton}\n                onPress={() => navigate('StaticMap')}>\n                <Text style={styles.item}>\n                  <Icon name=\"map\" style={styles.item}/>\n                  Map\n                </Text>\n              </TouchableOpacity>\n            </View>\n          ):\n          null}\n        disableGestures={this.state.sideMenuDisableGesture}\n        isOpen={this.state.sideMenuIsOpen}\n        onChange={(openStatus) => {\n          this.state.sideMenuIsOpen = openStatus;\n          this.setState({sideMenuDisableGesture: !openStatus});\n        }}\n      >\n        <MainView shouldHideHamburgerButton={this.shouldHideHamburgerButton}/>\n\n        {this.state.hideHamburgerButton?\n          null:\n          <IconButton style={[positions.hamburgerButton]} icon={'bars'} func={this.toggleSideBar} size={30}/>}\n      </SideMenu>\n    );\n  }\n}\n\n/**\n * MainViews that display groundMap and several Navigation buttons\n * The first button is to trigger the search field\n * The second button is the entry point for the underground map\n */\nclass MainView extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      underground: false,\n      selectedEntrance: null,\n      searchData: [],\n      navigationData: [],\n      navigationDataRequested: false,\n      isEntrance: true,\n    };\n    this.toggleUndergroundMap = this.toggleUndergroundMap.bind(this);\n    this.startNavigateCallback = this.startNavigateCallback.bind(this);\n    this.setSearchData = this.setSearchData.bind(this);\n    this.updateNavigationDataCallback = this.updateNavigationDataCallback.bind(this);\n    this.updateSlidingDetailView = this.updateSlidingDetailView.bind(this);\n    this.updateSegmentStartEndCallback = this.updateSegmentStartEndCallback.bind(this);\n    this.updateSwiperViewIndex = this.updateSwiperViewIndex.bind(this);\n    this.setMapInFocus = this.setMapInFocus.bind(this);\n    this.clearNavigationData = this.clearNavigationData.bind(this);\n    this.endNavigateCallback = this.endNavigateCallback.bind(this);\n    this.setUnderground = this.setUnderground.bind(this);\n    this.mapViewNetworkErrorHandler = this.mapViewNetworkErrorHandler.bind(this);\n    this.displayFeedbackWindow = this.displayFeedbackWindow.bind(this);\n  }\n\n  /**\n   * callBack for mapView to use to update the state related to whether the user is routing or not\n   * @param inputData\n   */\n  updateNavigationDataCallback(inputData) {\n    this.setState({\n      navigationData: inputData,\n      navigationDataRequested: true,\n    });\n  }\n\n  toggleUndergroundMap() {\n    this.setState({\n      underground: !this.state.underground,\n    });\n  }\n\n  setSearchData(data) {\n    this.setState({\n      searchData: data,\n    });\n  }\n\n  /**\n   * callback for the mapView to use to pass in new entrance/attraction to the sliding up view\n   * @param inputEntrance object of the entrance/attraction\n   * @param isEntrance whether it is an entrance or not\n   */\n  updateSlidingDetailView(inputEntrance, isEntrance) {\n    this.setState({\n      selectedEntrance: inputEntrance,\n      isEntrance: isEntrance,\n    });\n    this.slidingUpView.setIsOpen(true);\n  }\n\n  setUnderground(state) {\n    this.setState({underground: state});\n  }\n\n  /**\n   * callback to update the start and end segment of the highlight route in the mapview\n   * @param start\n   * @param end\n   */\n  updateSegmentStartEndCallback(start, end) {\n    if (this.map !== null) {\n      this.map.updateHighlightSegment(start, end);\n    }\n    this.slidingUpView.setIsOpen(true);\n  }\n\n  mapViewNetworkErrorHandler() {\n    if (this.map !== null) {\n      this.map.networkErrorHandler();\n    }\n  }\n\n  /**\n   * callback for the mapView to use to update the swiperView's index to the user's most recent location while\n   * in focus mode\n   * @param idx\n   */\n  updateSwiperViewIndex(idx) {\n    if (this.swiperView !== null) {\n      this.swiperView.updateSwiperViewIndex(idx);\n    }\n  }\n\n  /**\n   * set whether map should be in focus mode or not\n   * @param input\n   */\n  setMapInFocus(input) {\n    this.map.setMapInFocus(input);\n  }\n\n  displayFeedbackWindow(idx) {\n    if (this.map !== undefined && this.map !== null) {\n      this.map.displayFeedbackWindow(idx);\n    }\n  }\n\n  clearNavigationData() {\n    this.setState({navigationDataRequested: false});\n  }\n\n  /**\n   * start navigation to the inputedEntrance with the inputStatus\n   * also hide the searchBar and display the swiperView\n   * @param inputEntrance\n   * @param inputStatus\n   */\n  startNavigateCallback(inputEntrance, inputStatus) {\n    // use setState to clear the existing navigation data\n    this.setState({\n      navigateGround: inputStatus,\n      navigateTo: inputEntrance,\n      navigationData: [],\n      navigationDataRequested: false,\n    });\n    this.props.shouldHideHamburgerButton(inputStatus);\n\n    if (this.map !== null) {\n      this.map.updateNavigationState(inputStatus, inputEntrance, 0, 1);\n    }\n  }\n\n  /**\n   * end navigation, clear related data, hide swiperView and display searchBar\n   */\n  endNavigateCallback() {\n    this.props.shouldHideHamburgerButton(false);\n    this.setState({\n      navigateGround: false,\n    });\n    if (this.map !== null) {\n      this.map.updateNavigationState(false, undefined, 0, 1);\n    }\n    if (this.slidingUpView !== null) {\n      this.slidingUpView.setNavigate(false);\n    }\n  }\n\n  render() {\n    return (\n      <View style={styles.fillView}>\n        <GroundMapView\n          selectedMarkerCallback={(input, isEntrance) => {\n            this.updateSlidingDetailView(input, isEntrance);\n          }}\n          ref={(mapView) => {\n            this.map = mapView;\n          }}\n          updateNavigationDataCallback={this.updateNavigationDataCallback}\n          searchData={this.state.searchData}\n          underground={this.state.underground}\n          updateSwiperViewIndex={this.updateSwiperViewIndex}\n          clearNavigationData={this.clearNavigationData}\n          endNavigateCallback={this.endNavigateCallback}\n          setUnderground={this.setUnderground}\n        />\n        <SlidingUpDetailView\n          entrance={this.state.selectedEntrance}\n          isEntrance={this.state.isEntrance}\n          startNavigate={this.startNavigateCallback}\n          displayFeedbackWindow={this.displayFeedbackWindow}\n          ref={(slidingUpView) => {\n            this.slidingUpView = slidingUpView;\n          }}\n        />\n        {this.state.navigateGround?\n            null:\n            <SearchBar\n              updateSearchData={this.setSearchData}\n              networkErrorHandler={this.mapViewNetworkErrorHandler}\n            />}\n        <RoundButton\n          style={this.state.navigateGround?[positions.positionDown]:[positions.undergroundButton]}\n          icon={this.state.underground ? 'level-up' : 'level-down'}\n          func={this.toggleUndergroundMap}/>\n        {this.state.navigateGround?\n          <NavigationSwipeView\n            navigationData={this.state.navigationData}\n            navigationDataRequested={this.state.navigationDataRequested}\n            updateSegmentStartEndCallback={this.updateSegmentStartEndCallback}\n            setMapInFocus={this.setMapInFocus}\n            setUnderground={this.setUnderground}\n            ref={(navigationSwipeView) => {\n              this.swiperView = navigationSwipeView;\n            }}\n          />:\n          null\n        }\n      </View>\n    );\n  }\n}\n\n/**\n * display the navigator for the PDFMap and pedway Directory\n */\nconst MainNavigator = createStackNavigator({\n  Home: {\n    screen: HomeScreen,\n    navigationOptions: {\n      header: null,\n    },\n  },\n  FoodDirectory: {screen: Directory},\n  StaticMap: {screen: PDFMap},\n});\n\nconst App = createAppContainer(MainNavigator);\n\nexport default App;\n\n\n",
    "static": true,
    "longname": "/Users/arivval/Documents/Courseworks/CS428/pedway4/pedway/pedwayApp/components/App.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 49,
    "kind": "class",
    "name": "HomeScreen",
    "memberof": "components/App.js",
    "static": true,
    "longname": "components/App.js~HomeScreen",
    "access": "public",
    "export": false,
    "importPath": "ReactNativeTest/components/App.js",
    "importStyle": null,
    "description": "HomeScreen that gets rendered first when everything is loaded\nConsists of a Sidemenu, a MainView, and a hamburger button that toggles\nSidemenu/MainView",
    "lineNumber": 42,
    "interface": false,
    "extends": [
      "react~React.Component"
    ],
    "ignore": true
  },
  {
    "__docId__": 50,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "components/App.js~HomeScreen",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "components/App.js~HomeScreen#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 43,
    "undocument": true
  },
  {
    "__docId__": 51,
    "kind": "member",
    "name": "state",
    "memberof": "components/App.js~HomeScreen",
    "static": false,
    "longname": "components/App.js~HomeScreen#state",
    "access": "public",
    "description": null,
    "lineNumber": 45,
    "undocument": true,
    "type": {
      "types": [
        "{\"sideMenuIsOpen\": *, \"sideMenuDisableGesture\": boolean, \"apiServerURL\": string, \"navigateGround\": *, \"navigateTo\": *, \"hideHamburgerButton\": *}"
      ]
    }
  },
  {
    "__docId__": 54,
    "kind": "method",
    "name": "toggleSideBar",
    "memberof": "components/App.js~HomeScreen",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "components/App.js~HomeScreen#toggleSideBar",
    "access": "public",
    "description": null,
    "lineNumber": 59,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 55,
    "kind": "method",
    "name": "componentDidMount",
    "memberof": "components/App.js~HomeScreen",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "components/App.js~HomeScreen#componentDidMount",
    "access": "public",
    "description": null,
    "lineNumber": 64,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 56,
    "kind": "method",
    "name": "shouldHideHamburgerButton",
    "memberof": "components/App.js~HomeScreen",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "components/App.js~HomeScreen#shouldHideHamburgerButton",
    "access": "public",
    "description": null,
    "lineNumber": 68,
    "undocument": true,
    "params": [
      {
        "name": "inputStatus",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 57,
    "kind": "method",
    "name": "render",
    "memberof": "components/App.js~HomeScreen",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "components/App.js~HomeScreen#render",
    "access": "public",
    "description": "renders a sidemenu and the mainView in the SideMenu component",
    "lineNumber": 76,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{*}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 58,
    "kind": "class",
    "name": "MainView",
    "memberof": "components/App.js",
    "static": true,
    "longname": "components/App.js~MainView",
    "access": "public",
    "export": false,
    "importPath": "ReactNativeTest/components/App.js",
    "importStyle": null,
    "description": "MainViews that display groundMap and several Navigation buttons\nThe first button is to trigger the search field\nThe second button is the entry point for the underground map",
    "lineNumber": 125,
    "interface": false,
    "extends": [
      "react~React.Component"
    ],
    "ignore": true
  },
  {
    "__docId__": 59,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "components/App.js~MainView",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "components/App.js~MainView#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 126,
    "undocument": true
  },
  {
    "__docId__": 60,
    "kind": "member",
    "name": "state",
    "memberof": "components/App.js~MainView",
    "static": false,
    "longname": "components/App.js~MainView#state",
    "access": "public",
    "description": null,
    "lineNumber": 128,
    "undocument": true,
    "type": {
      "types": [
        "{\"underground\": *, \"selectedEntrance\": *, \"searchData\": *, \"navigationData\": *, \"navigationDataRequested\": *, \"isEntrance\": boolean}"
      ]
    }
  },
  {
    "__docId__": 74,
    "kind": "method",
    "name": "updateNavigationDataCallback",
    "memberof": "components/App.js~MainView",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "components/App.js~MainView#updateNavigationDataCallback",
    "access": "public",
    "description": "callBack for mapView to use to update the state related to whether the user is routing or not",
    "lineNumber": 155,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "inputData",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 75,
    "kind": "method",
    "name": "toggleUndergroundMap",
    "memberof": "components/App.js~MainView",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "components/App.js~MainView#toggleUndergroundMap",
    "access": "public",
    "description": null,
    "lineNumber": 162,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 76,
    "kind": "method",
    "name": "setSearchData",
    "memberof": "components/App.js~MainView",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "components/App.js~MainView#setSearchData",
    "access": "public",
    "description": null,
    "lineNumber": 168,
    "undocument": true,
    "params": [
      {
        "name": "data",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 77,
    "kind": "method",
    "name": "updateSlidingDetailView",
    "memberof": "components/App.js~MainView",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "components/App.js~MainView#updateSlidingDetailView",
    "access": "public",
    "description": "callback for the mapView to use to pass in new entrance/attraction to the sliding up view",
    "lineNumber": 179,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "inputEntrance",
        "description": "object of the entrance/attraction"
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "isEntrance",
        "description": "whether it is an entrance or not"
      }
    ],
    "return": null
  },
  {
    "__docId__": 78,
    "kind": "method",
    "name": "setUnderground",
    "memberof": "components/App.js~MainView",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "components/App.js~MainView#setUnderground",
    "access": "public",
    "description": null,
    "lineNumber": 187,
    "undocument": true,
    "params": [
      {
        "name": "state",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 79,
    "kind": "method",
    "name": "updateSegmentStartEndCallback",
    "memberof": "components/App.js~MainView",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "components/App.js~MainView#updateSegmentStartEndCallback",
    "access": "public",
    "description": "callback to update the start and end segment of the highlight route in the mapview",
    "lineNumber": 196,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "start",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "end",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 80,
    "kind": "method",
    "name": "mapViewNetworkErrorHandler",
    "memberof": "components/App.js~MainView",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "components/App.js~MainView#mapViewNetworkErrorHandler",
    "access": "public",
    "description": null,
    "lineNumber": 203,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 81,
    "kind": "method",
    "name": "updateSwiperViewIndex",
    "memberof": "components/App.js~MainView",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "components/App.js~MainView#updateSwiperViewIndex",
    "access": "public",
    "description": "callback for the mapView to use to update the swiperView's index to the user's most recent location while\nin focus mode",
    "lineNumber": 214,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "idx",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 82,
    "kind": "method",
    "name": "setMapInFocus",
    "memberof": "components/App.js~MainView",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "components/App.js~MainView#setMapInFocus",
    "access": "public",
    "description": "set whether map should be in focus mode or not",
    "lineNumber": 224,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "input",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 83,
    "kind": "method",
    "name": "displayFeedbackWindow",
    "memberof": "components/App.js~MainView",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "components/App.js~MainView#displayFeedbackWindow",
    "access": "public",
    "description": null,
    "lineNumber": 228,
    "undocument": true,
    "params": [
      {
        "name": "idx",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 84,
    "kind": "method",
    "name": "clearNavigationData",
    "memberof": "components/App.js~MainView",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "components/App.js~MainView#clearNavigationData",
    "access": "public",
    "description": null,
    "lineNumber": 234,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 85,
    "kind": "method",
    "name": "startNavigateCallback",
    "memberof": "components/App.js~MainView",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "components/App.js~MainView#startNavigateCallback",
    "access": "public",
    "description": "start navigation to the inputedEntrance with the inputStatus\nalso hide the searchBar and display the swiperView",
    "lineNumber": 244,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "inputEntrance",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "inputStatus",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 86,
    "kind": "method",
    "name": "endNavigateCallback",
    "memberof": "components/App.js~MainView",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "components/App.js~MainView#endNavigateCallback",
    "access": "public",
    "description": "end navigation, clear related data, hide swiperView and display searchBar",
    "lineNumber": 262,
    "params": [],
    "return": null
  },
  {
    "__docId__": 87,
    "kind": "method",
    "name": "render",
    "memberof": "components/App.js~MainView",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "components/App.js~MainView#render",
    "access": "public",
    "description": null,
    "lineNumber": 275,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 88,
    "kind": "member",
    "name": "map",
    "memberof": "components/App.js~MainView",
    "static": false,
    "longname": "components/App.js~MainView#map",
    "access": "public",
    "description": null,
    "lineNumber": 283,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 89,
    "kind": "member",
    "name": "slidingUpView",
    "memberof": "components/App.js~MainView",
    "static": false,
    "longname": "components/App.js~MainView#slidingUpView",
    "access": "public",
    "description": null,
    "lineNumber": 299,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 90,
    "kind": "member",
    "name": "swiperView",
    "memberof": "components/App.js~MainView",
    "static": false,
    "longname": "components/App.js~MainView#swiperView",
    "access": "public",
    "description": null,
    "lineNumber": 320,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 91,
    "kind": "variable",
    "name": "MainNavigator",
    "memberof": "components/App.js",
    "static": true,
    "longname": "components/App.js~MainNavigator",
    "access": "public",
    "export": false,
    "importPath": "ReactNativeTest/components/App.js",
    "importStyle": null,
    "description": "display the navigator for the PDFMap and pedway Directory",
    "lineNumber": 333,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 92,
    "kind": "variable",
    "name": "App",
    "memberof": "components/App.js",
    "static": true,
    "longname": "components/App.js~App",
    "access": "public",
    "export": true,
    "importPath": "ReactNativeTest/components/App.js",
    "importStyle": "App",
    "description": null,
    "lineNumber": 344,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 93,
    "kind": "file",
    "name": "components/Directory/Directory.js",
    "content": "import styles from './styles';\nimport {Text, TouchableOpacity, View} from 'react-native';\nimport React, {Component} from 'react';\n\n/**\n * Renders a screen displaying a directory\n * of all the restaurants located within the Pedway\n */\nexport default class Directory extends React.Component {\n  render() {\n    return (\n      <View style={styles.container}>\n        <Text style={styles.header}>Directory</Text>\n        <Text style={styles.subtitle}>James R Thompson Center</Text>\n        <Text style={styles.subtext}>\n                    M Burger - 100 West Randolph Street{'\\n'}\n                    Pita Express - 100 West Randolph Street\n        </Text>\n        <Text style={styles.subtitle}>Chase Tower</Text>\n        <Text style={styles.subtext}>\n                    Big Easy - Urban Market, 10 South Dearborn Street{'\\n'}\n                    Tortas Frontera - Urban Market, 10 South Dearborn Street\n        </Text>\n        <Text style={styles.subtitle}>Prudential Plaza</Text>\n        <Text style={styles.subtext}>\n                    Caffe RoM - 180 North Stetson Avenue{'\\n'}\n                    Snarf's - 180 North Stetson Avenue\n        </Text>\n        <Text style={styles.subtitle}>Block 37</Text>\n        <Text style={styles.subtext}>\n                    Which Wich - 108 North State Street #002\n        </Text>\n        <Text style={styles.subtitle}>Illinois Center</Text>\n        <Text style={styles.subtext}>\n                    Hannah's Bretzel - 233 North Michigan Avenue{'\\n'}\n                    Potbelly - 111 East Wacker Drive\n        </Text>\n        <Text style={styles.subtitle}>Millennium Station</Text>\n        <Text style={styles.subtext}>\n                    Armand's Pizzeria - 151 North Michigan Avenue\n        </Text>\n        <Text style={styles.subtitle}>Michigan Plaza</Text>\n        <Text style={styles.subtext}>\n                    Mezza - 225 North Michigan Avenue{'\\n'}\n                    Wow Bao - 225 North Michigan Avenue{'\\n'}\n                    Pret a manger - 225 North Michigan Avenue\n        </Text>\n        <Text style={styles.subtitle}>201 N. Clark</Text>\n        <Text style={styles.subtext}>\n                    Olive Mediterranean Grill - 201 North Clark Street\n        </Text>\n        <Text style={styles.subtitle}>Renaissance Chicago Hotel</Text>\n        <Text style={styles.subtext}>\n                    Protein Bar - 10 W Lake St{'\\n'}\n                    Wow Bao - 1 West Wacker Drive\n        </Text>\n      </View>\n    );\n  }\n}\n",
    "static": true,
    "longname": "/Users/arivval/Documents/Courseworks/CS428/pedway4/pedway/pedwayApp/components/Directory/Directory.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 94,
    "kind": "class",
    "name": "Directory",
    "memberof": "components/Directory/Directory.js",
    "static": true,
    "longname": "components/Directory/Directory.js~Directory",
    "access": "public",
    "export": true,
    "importPath": "ReactNativeTest/components/Directory/Directory.js",
    "importStyle": "Directory",
    "description": "Renders a screen displaying a directory\nof all the restaurants located within the Pedway",
    "lineNumber": 9,
    "interface": false,
    "extends": [
      "react~React.Component"
    ]
  },
  {
    "__docId__": 95,
    "kind": "method",
    "name": "render",
    "memberof": "components/Directory/Directory.js~Directory",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "components/Directory/Directory.js~Directory#render",
    "access": "public",
    "description": null,
    "lineNumber": 10,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 96,
    "kind": "file",
    "name": "components/Directory/styles.js",
    "content": "import {StyleSheet} from 'react-native';\n\nexport default StyleSheet.create({\n  container: {\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n  header: {\n    textAlign: 'center',\n    fontSize: 30,\n    fontWeight: 'bold',\n    marginTop: 10,\n  },\n  subtitle: {\n    fontSize: 15,\n    fontWeight: 'bold',\n    fontStyle: 'italic',\n    marginTop: 5,\n  },\n  subtext: {\n    fontSize: 15,\n  }});\n",
    "static": true,
    "longname": "/Users/arivval/Documents/Courseworks/CS428/pedway4/pedway/pedwayApp/components/Directory/styles.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 97,
    "kind": "file",
    "name": "components/FeedbackView/FeedbackView.js",
    "content": "import React, {Component} from 'react';\nimport axios from 'axios';\nimport {ToastAndroid, Picker, Text, TextInput} from 'react-native';\nimport Dialog, {DialogContent, SlideAnimation, DialogTitle, DialogFooter, DialogButton} from 'react-native-popup-dialog';\nimport {Keyboard} from 'react-native';\n\nconst AZURE_API = 'https://pedway.azurewebsites.net/api';\n\n/**\n * display a dialog allowing user the enter the current status of the pedway entrance and provide written feedbacks\n * the user can choose to submit this form via the feedback api\n */\nexport default class FeedbackView extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      dialogTitle: 'Entrance Feedback',\n      dialogVisibility: false,\n      nodeID: '',\n      selectedValue: '',\n      note: '',\n    };\n    this.showDialog = this.showDialog.bind(this);\n    this.submitFeedback = this.submitFeedback.bind(this);\n  }\n\n  /**\n   * dispaly a feedback for an entrance with nodeID in the database\n   * @param nodeID\n   */\n  showDialog(nodeID) {\n    this.setState({\n      dialogVisibility: true,\n      nodeID: nodeID,\n      selectedValue: '',\n      note: '',\n    });\n  }\n\n  /**\n   * submit this form via axios call to the backend endpoints\n   * also display a toast with the submission status via toast\n   */\n  submitFeedback() {\n    Keyboard.dismiss();\n    this.setState({\n      dialogVisibility: false,\n    });\n    axios.post(AZURE_API + '/feedback',\n        {\n          'entranceId': this.state.nodeID,\n          'message': this.state.note,\n          'reported_status': this.state.selectedValue,\n          'type': 'feedback',\n        }\n    ).then((res) => {\n      if (res.status === 200) {\n        ToastAndroid.showWithGravityAndOffset('Feedback Submitted', ToastAndroid.LONG, ToastAndroid.BOTTOM, 0, 350);\n      } else {\n        ToastAndroid.showWithGravityAndOffset('Unable to Submit Feedback', ToastAndroid.LONG, ToastAndroid.BOTTOM, 0, 350);\n      }\n    }).catch((e) => {\n      ToastAndroid.showWithGravityAndOffset('Unable to Submit Feedback', ToastAndroid.LONG, ToastAndroid.BOTTOM, 0, 350);\n    });\n  }\n\n  render() {\n    return (\n      <Dialog\n        visible={this.state.dialogVisibility}\n        width={0.7}\n        dialogTitle={<DialogTitle title={this.state.dialogTitle}/>}\n        dialogAnimation={new SlideAnimation({\n          slideFrom: 'bottom',\n        })}\n        footer={\n          <DialogFooter>\n            <DialogButton\n              text={'Cancel'}\n              onPress={()=>{\n                this.setState({\n                  dialogVisibility: false,\n                });\n                Keyboard.dismiss();\n              }}\n            />\n            <DialogButton\n              text={'Submit'}\n              onPress={this.submitFeedback}\n              disabled={this.state.selectedValue===''}\n            />\n          </DialogFooter>\n        }\n        onTouchOutside={() => {\n        }}\n      >\n        <DialogContent>\n\n          <Text>Submit feedback for this entrance's status:</Text>\n          <Picker\n            onValueChange={(val, idx) => {\n              // resolve race condition\n              setTimeout(()=> {\n                this.setState({selectedValue: val});\n              }, 15);\n            }}\n            selectedValue={this.state.selectedValue}\n          >\n            <Picker.Item label='Select entrance status' value=''/>\n            <Picker.Item label='Open' value='open'/>\n            <Picker.Item label='Closed' value='closed'/>\n            <Picker.Item label='Closing' value='closing'/>\n            <Picker.Item label='Dirty' value='dirty'/>\n          </Picker>\n          <TextInput\n            onChangeText={(input) => {\n              this.setState({note: input});\n            }}\n            value={this.state.note}\n            placeholder={'optional description'}\n          />\n        </DialogContent>\n      </Dialog>);\n  }\n}\n",
    "static": true,
    "longname": "/Users/arivval/Documents/Courseworks/CS428/pedway4/pedway/pedwayApp/components/FeedbackView/FeedbackView.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 98,
    "kind": "variable",
    "name": "AZURE_API",
    "memberof": "components/FeedbackView/FeedbackView.js",
    "static": true,
    "longname": "components/FeedbackView/FeedbackView.js~AZURE_API",
    "access": "public",
    "export": false,
    "importPath": "ReactNativeTest/components/FeedbackView/FeedbackView.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 99,
    "kind": "class",
    "name": "FeedbackView",
    "memberof": "components/FeedbackView/FeedbackView.js",
    "static": true,
    "longname": "components/FeedbackView/FeedbackView.js~FeedbackView",
    "access": "public",
    "export": true,
    "importPath": "ReactNativeTest/components/FeedbackView/FeedbackView.js",
    "importStyle": "FeedbackView",
    "description": "display a dialog allowing user the enter the current status of the pedway entrance and provide written feedbacks\nthe user can choose to submit this form via the feedback api",
    "lineNumber": 13,
    "interface": false,
    "extends": [
      "react~React.Component"
    ]
  },
  {
    "__docId__": 100,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "components/FeedbackView/FeedbackView.js~FeedbackView",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "components/FeedbackView/FeedbackView.js~FeedbackView#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 14,
    "undocument": true
  },
  {
    "__docId__": 101,
    "kind": "member",
    "name": "state",
    "memberof": "components/FeedbackView/FeedbackView.js~FeedbackView",
    "static": false,
    "longname": "components/FeedbackView/FeedbackView.js~FeedbackView#state",
    "access": "public",
    "description": null,
    "lineNumber": 16,
    "undocument": true,
    "type": {
      "types": [
        "{\"dialogTitle\": string, \"dialogVisibility\": *, \"nodeID\": *, \"selectedValue\": *, \"note\": *}"
      ]
    }
  },
  {
    "__docId__": 104,
    "kind": "method",
    "name": "showDialog",
    "memberof": "components/FeedbackView/FeedbackView.js~FeedbackView",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "components/FeedbackView/FeedbackView.js~FeedbackView#showDialog",
    "access": "public",
    "description": "dispaly a feedback for an entrance with nodeID in the database",
    "lineNumber": 31,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "nodeID",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 105,
    "kind": "method",
    "name": "submitFeedback",
    "memberof": "components/FeedbackView/FeedbackView.js~FeedbackView",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "components/FeedbackView/FeedbackView.js~FeedbackView#submitFeedback",
    "access": "public",
    "description": "submit this form via axios call to the backend endpoints\nalso display a toast with the submission status via toast",
    "lineNumber": 44,
    "params": [],
    "return": null
  },
  {
    "__docId__": 106,
    "kind": "method",
    "name": "render",
    "memberof": "components/FeedbackView/FeedbackView.js~FeedbackView",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "components/FeedbackView/FeedbackView.js~FeedbackView#render",
    "access": "public",
    "description": null,
    "lineNumber": 67,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 107,
    "kind": "file",
    "name": "components/FeedbackView/styles.js",
    "content": "",
    "static": true,
    "longname": "/Users/arivval/Documents/Courseworks/CS428/pedway4/pedway/pedwayApp/components/FeedbackView/styles.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 108,
    "kind": "file",
    "name": "components/GroundMapView/GroundMapView.js",
    "content": "import React, {Component} from 'react';\nimport styles from './styles';\nimport {Image, Platform, StyleSheet, Text, View, TouchableOpacity, ToastAndroid, Picker, PermissionsAndroid} from 'react-native';\nimport MapView, {\n  Polyline,\n} from 'react-native-maps';\nimport Dialog, {DialogContent, SlideAnimation, DialogTitle, DialogFooter, DialogButton} from 'react-native-popup-dialog';\nimport RenderPedway from '../RenderPedway/RenderPedway';\nimport MapStyle from './mapStyleDark';\nimport RenderEntrance from '../RenderEntrance/RenderEntrance';\nimport RenderLocation from '../RenderLocation/RenderLocation';\nimport RenderAttraction from '../RenderAttractions/RenderAttractions';\nimport circle from '../../media/pedwayEntranceMarker.png';\nimport axios from 'axios';\nimport RoundButton from '../RoundButton/RoundButton';\nimport * as polyline from 'google-polyline';\nimport PedwayCoordinate from '../../model/PedwayCoordinate';\nimport PedwaySection from '../../model/PedwaySection';\nimport {Keyboard} from 'react-native';\nimport PedwaySections from '../../mock_data/sections';\nimport {point, lineString} from '@turf/helpers';\nimport pointToLineDistance from '@turf/point-to-line-distance';\nimport distance from '@turf/distance';\nimport Attractions from '../../mock_data/attractions';\nimport FeedbackView from '../FeedbackView/FeedbackView';\n\nconst AZURE_API = 'https://pedway.azurewebsites.net/api';\n\nconst INITIAL_LATITUDE = 41.881898;\nconst INITIAL_LONGITUDE = -87.623977;\nconst INITIAL_DELTA = 0.007;\nconst RECENTER_DELTA = 0.005;\nconst MAXIMUM_OFFSET_DISTANCE = 0.1;\n\nlet LOCATION_SERVICE_AVAILABLE = false;\n\n\nlet isUserInitiatedRegionChange = false;\nlet appInitiated = false;\nlet nextMapState = undefined;\n\nlet currentSegmentIndex = -1;\n\n/**\n * Renders a MapView that display the ground level map\n * we are setting provider to null and UrlTile to OpenStreetMap's API\n * to use OSM\n * If highlight segment is true, highlight color used for indexes within start and end\n * If greyscale is also true, grey scale color will be used for indexes < start index\n * The initial highlight segment is 0 to 1, only highlighting the first line in a route\n */\nexport default class GroundMapView extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      latitude: INITIAL_LATITUDE,\n      longitude: INITIAL_LONGITUDE,\n      latitudeDelta: RECENTER_DELTA,\n      longitudeDelta: RECENTER_DELTA,\n      userLatitude: INITIAL_LATITUDE,\n      userLongitude: INITIAL_LONGITUDE,\n      error: null,\n      pedwayData: undefined,\n      updateGeoLocation: true,\n      id: 0,\n      navigate: false,\n      navigateTo: null,\n      navigateDataRequested: false,\n      navigateJSON: null,\n      searchData: [],\n      navigateList: [],\n      highlightSegment: true,\n      greyScaleSegment: true,\n      highlightSegmentStart: 0,\n      highlightSegmentEnd: 1,\n      strokeColor: '#234ca0',\n      highlightStrokeColor: '#4185F4',\n      greyScaleStrokeColor: '#777',\n      underground: this.props.underground?false:this.props.underground,\n      mapReady: false,\n      mapInFocus: true,\n      dialogVisibility: false,\n      dialogContent: '',\n      dialogTitle: '',\n      dialogButtonText: '',\n    };\n    this.forwardSelectedEntrance = this.forwardSelectedEntrance.bind(this);\n    this.renderPath = this.renderPath.bind(this);\n    this.requestEntranceData = this.requestEntranceData.bind(this);\n    this.recenter = this.recenter.bind(this);\n    this.getGeometry = this.getGeometry.bind(this);\n    this.renderMarkers =this.renderMarkers.bind(this);\n    this.setSearchData = this.setSearchData.bind(this);\n    this.getCurrentClosestSegment = this.getCurrentClosestSegment.bind(this);\n    this.setMapInFocus = this.setMapInFocus.bind(this);\n    this.onRegionChangeComplete = this.onRegionChangeComplete.bind(this);\n    this.mapOnPanDrag = this.mapOnPanDrag.bind(this);\n    this.updateCurrentSegment = this.updateCurrentSegment.bind(this);\n    this.positionDidUpdateCallback = this.positionDidUpdateCallback.bind(this);\n    this.recalculatePath = this.recalculatePath.bind(this);\n    this.updateNavigationState = this.updateNavigationState.bind(this);\n    this.updateHighlightSegment = this.updateHighlightSegment.bind(this);\n    this.onReachedDestination = this.onReachedDestination.bind(this);\n    this.updateMapMode = this.updateMapMode.bind(this);\n    this.findOntoString = this.findOntoString.bind(this);\n    this.networkErrorHandler = this.networkErrorHandler.bind(this);\n    this.showSuggestionToast = this.showSuggestionToast.bind(this);\n    this.displayFeedbackWindow = this.displayFeedbackWindow.bind(this);\n  }\n\n  /**\n   * Fetch the pedway entrance geoJSON data from the back end\n   */\n  requestEntranceData() {\n    axios.get(AZURE_API + '/pedway/entrance').then((res) => {\n      this.setState({\n        pedwayData: res,\n      });\n    }).catch((e) => {\n    },\n    );\n  }\n\n  setSearchData(data) {\n    this.setState({\n      searchData: data,\n    });\n  }\n\n  setMapInFocus(input) {\n    this.setState({\n      mapInFocus: input,\n    });\n  }\n\n  /**\n   * callBack function for refocusing the map and navigation whenever user position is updated\n   * @param position\n   * @param id reference for the listener (so we can unmount it)\n   */\n  positionDidUpdateCallback(position, id) {\n    // also center during app init\n    if (!appInitiated) {\n      appInitiated = true;\n      this.setState({\n        Latitude: position.coords.latitude,\n        Longitude: position.coords.longitude,\n      });\n    }\n    this.setState({\n      userLatitude: position.coords.latitude,\n      userLongitude: position.coords.longitude,\n      error: null,\n      id: id,\n    });\n    if (this.state.navigate) {\n      if (this.state.mapInFocus) {\n        const region = {\n          latitude: position.coords.latitude,\n          longitude: position.coords.longitude,\n          latitudeDelta: INITIAL_DELTA,\n          longitudeDelta: INITIAL_DELTA,\n        };\n\n        this.map.animateToRegion(region, 1000);\n        // update the current segment for the swiper view and navigation path while navigating\n        this.updateCurrentSegment(position.coords.longitude, position.coords.latitude);\n      } else {\n        // although map is not in focus, we still need to check for recalculation\n        this.getCurrentClosestSegment(position.coords.longitude, position.coords.latitude);\n      }\n    }\n  }\n\n  /**\n   * get the /node id of the entrance, and make the api request\n   * @param index\n   */\n  displayFeedbackWindow(index) {\n    try {\n      let nodeID = this.state.pedwayData['data'][index]['properties']['@id'];\n      if (this.feedbackView !== null) {\n        this.feedbackView.showDialog(nodeID);\n      }\n    } catch (e) {\n    }\n  }\n\n  /**\n   * watch user's real time location and update the map accordingly.\n   * also check if have location permission or not, if no permission, toast no permission\n   */\n  async componentDidMount() {\n    LOCATION_SERVICE_AVAILABLE = await PermissionsAndroid.check(PermissionsAndroid.PERMISSIONS.ACCESS_FINE_LOCATION);\n    if (LOCATION_SERVICE_AVAILABLE) {\n      let id = navigator.geolocation.watchPosition(\n          (position) => {\n            this.positionDidUpdateCallback(position, id);\n          }, (error)=>{\n            this.setState({dialogTitle: 'GPS Error',\n              dialogVisibility: true,\n              dialogContent: 'Oops, we lose you on the map. Please enable GPS access to the app. If you are underground, the GPS service may be unstable.',\n              dialogButtonText: 'Dismiss',\n            });\n          }, {enableHighAccuracy: true, distanceFilter: 1});\n      this.requestEntranceData();\n    } else {\n      this.setState({dialogTitle: 'GPS Error',\n        dialogVisibility: true,\n        dialogContent: 'You should grant permission access for this app',\n        dialogButtonText: 'Dismiss',\n      });\n    }\n  }\n\n  /**\n   * this function is called when user is navigation. Update the user's current segment\n   * @param longitude\n   * @param latitude\n   */\n  updateCurrentSegment(longitude, latitude) {\n    // if the user is still in route, we just need to update his current section to the closest section\n    if (this.state.navigateJSON!==undefined && this.state.navigateJSON!==null) {\n      // here we need to check which of the line section is the user currently closest to\n      // then set that section to the swiper view's props and update this state's segment start and end\n      let [closestSegment, segmentIdx] = this.getCurrentClosestSegment(longitude, latitude);\n      this.setState({\n        highlightSegmentStart: closestSegment['way_points'][0],\n        highlightSegmentEnd: closestSegment['way_points'][1],\n      });\n      // we also need to update the current index for the swiper view\n      this.props.updateSwiperViewIndex(segmentIdx);\n    }\n  }\n\n  /**\n   * Helper for updateCurrentSegment, use turf to calculate the user's closest segment in navigation path\n   * Take in user's current location and parses the user's current route from geoJSON representation into\n   * turf data structure.\n   * Then we can use the pointToLineDistance() method from turf to find out what step is the user currently\n   * on in his/her route\n   * We then return that closest segment and the index of that segment in the list\n   * If this function finds the users is away from the closest section more than 50 meter,\n   * it will call recalculatePath() to recalculate\n   * @param longitude\n   * @param latitude\n   * @returns {*[]}\n   */\n  getCurrentClosestSegment(longitude, latitude) {\n    let navigateRoute = this.state.navigateJSON['data']['routes'][0];\n    let segmentList = navigateRoute['segments'][0]['steps'];\n    let closestSegmentIdx = 0;\n    let closestDistanceOverall = Number.MAX_VALUE;\n\n\n    segmentList.forEach((item, idx) => {\n      let currentDistance = Number.MAX_VALUE;\n      // we have to consider that the destination is a point\n      if (item['way_points'][0] !== item['way_points'][1]) {\n        let thisLineSection = this.state.navigateList['coordinates'].slice(item['way_points'][0], item['way_points'][1] + 1);\n\n        let currentLineArray = thisLineSection.map((item) => {\n          return [item['longitude'], item['latitude']];\n        }).reduce((acc, item) => {\n          return acc.concat([item]);\n        }, []);\n\n        let currentLine = lineString(currentLineArray);\n        let currentPoint = point([longitude, latitude]);\n        currentDistance = pointToLineDistance(currentPoint, currentLine);\n      }\n\n      if (currentDistance < closestDistanceOverall) {\n        closestDistanceOverall = currentDistance;\n        closestSegmentIdx = idx;\n      }\n    });\n\n    // now we need to check, if the next index is within 10 meters of the current index,\n    // if so, we need to update it ahead of time\n    let nextSegment = segmentList[closestSegmentIdx + 1];\n    let currentDistance = 0;\n    if (nextSegment['way_points'][0] !== nextSegment['way_points'][1]) {\n      let thisLineSection = this.state.navigateList['coordinates'].slice(nextSegment['way_points'][0], nextSegment['way_points'][1] + 1);\n\n      let currentLineArray = thisLineSection.map((item) => {\n        return [item['longitude'], item['latitude']];\n      }).reduce((acc, item) => {\n        return acc.concat([item]);\n      }, []);\n\n      let currentLine = lineString(currentLineArray);\n      let currentPoint = point([longitude, latitude]);\n      currentDistance = pointToLineDistance(currentPoint, currentLine);\n    } else {\n      let currentPoint = point([longitude, latitude]);\n      let destinationCoordinate = this.state.navigateList['coordinates'][nextSegment['way_points'][0]];\n      let destinationPoint = point([destinationCoordinate['longitude'], destinationCoordinate['latitude']]);\n      currentDistance = distance(currentPoint, destinationPoint);\n    }\n\n    if (currentDistance - 0.01 < closestDistanceOverall) {\n      closestSegmentIdx += 1;\n      closestDistanceOverall = currentDistance;\n    }\n\n    // check if user deviated more than 100 meters from the path\n    if (closestDistanceOverall > MAXIMUM_OFFSET_DISTANCE) {\n      this.recalculatePath(longitude, latitude);\n    } else if (closestSegmentIdx === segmentList.length - 1) {\n      // user reached the destination, we need to end navigation\n      this.onReachedDestination();\n    }\n\n    // this.updateMapMode(closestSegmentIdx);\n    if (closestSegmentIdx !== currentSegmentIndex) {\n      currentSegmentIndex = closestSegmentIdx;\n      this.updateMapMode(closestSegmentIdx);\n    }\n\n    return [segmentList[closestSegmentIdx], closestSegmentIdx];\n  }\n\n  /**\n   * pass in the next idx the user is about to enter, check if the user is about to enter the pedway or not\n   * @param idx\n   */\n  updateMapMode(idx) {\n    let route = this.state.navigateJSON['data']['routes'][0];\n    let nextInstruction = route['segments'][0]['steps'][idx]['instruction'];\n    this.findOntoString(nextInstruction);\n  }\n\n  /**\n   * parse the 'onto someRoad' in the instruction, if 'someRoad' === 'pedway', we need to show the suggestion toast\n   * suggesting the user to use the underground mode\n   * @param instruction\n   */\n  findOntoString(instruction) {\n    let ontoIndex = instruction.indexOf('onto');\n    let roadString = '';\n    if (ontoIndex === -1) {\n      let onIndex = instruction.indexOf('on');\n      if (onIndex !== -1) {\n        roadString = instruction.slice(onIndex + 3);\n      } else {\n        return;\n      }\n    } else {\n      roadString = instruction.slice(ontoIndex + 5);\n    }\n\n    if (!this.state.underground && roadString === 'Pedway') {\n      this.showSuggestionToast();\n    }\n  }\n\n  /**\n   * suggest user to take the pedway\n   */\n  showSuggestionToast() {\n    ToastAndroid.showWithGravityAndOffset('Switch to underground mode to view the Pedway', ToastAndroid.LONG, ToastAndroid.BOTTOM, 0, 350);\n  }\n\n  /**\n   * tell app component which entrance/attraction the user have selected\n   * also make api request to the backend to get the updated status of the entrance\n   * if there is a status change, we need to update our data stored in the app\n   * @param inputEntrance   data of the entrance/attration\n   * @param isEntrance  whether the selected marker is entrance or not\n   */\n  forwardSelectedEntrance(inputEntrance, isEntrance) {\n    Keyboard.dismiss();\n    if (this.props.selectedMarkerCallback !== undefined) {\n      this.props.selectedMarkerCallback(inputEntrance, isEntrance);\n    }\n    //\n    if (isEntrance) {\n      let entranceIndexString = inputEntrance.getName().slice(10);\n      try {\n        let entranceIndex = parseInt(entranceIndexString);\n        let nodeID = this.state.pedwayData.data[entranceIndex].id;\n        // now we can make the api call and update our states\n        axios.get(AZURE_API + '/pedway/entrance/' + nodeID)\n            .then( (res) => {\n              let newStatus = res.data.status;\n              this.state.pedwayData.data[entranceIndex].status = newStatus;\n              inputEntrance.setStatus(newStatus);\n              this.props.selectedMarkerCallback(inputEntrance, isEntrance);\n            })\n            .catch((e) => {});\n      } catch (e) {\n      }\n    }\n  }\n\n  /**\n   * This function is called whenever the user deviates from the path,\n   * request a new path based on the location, and reset the UI for navigation\n   * @param newLongitude\n   * @param newLatitude\n   */\n  recalculatePath(newLongitude, newLatitude) {\n    let destination = this.state.navigateTo;\n    this.props.clearNavigationData();\n    try {\n      this.getGeometry([newLatitude, newLongitude],\n          [destination.getCoordinate().getLatitude(), destination.getCoordinate().getLongitude()]);\n    } catch (e) {\n    }\n  }\n\n  componentWillReceiveProps(nextProps) {\n    this.setSearchData(nextProps.searchData);\n    if (nextProps.underground !== this.state.underground && nextProps.underground) {\n      this.setState({mapReady: false});\n    }\n    this.setState({underground: nextProps.underground});\n  }\n\n  /**\n   * update the highlight segment of the line shown during routing to the start and end index\n   * @param highlightSegmentStart\n   * @param highlightSegmentEnd\n   */\n  updateHighlightSegment(highlightSegmentStart, highlightSegmentEnd) {\n    if (this.state.navigate === true) {\n      this.setState({\n        highlightSegmentStart: highlightSegmentStart,\n        highlightSegmentEnd: highlightSegmentEnd,\n      });\n    }\n  }\n\n  /**\n   * helper function for app component to call\n   * also pass in the initial highlight segment start end index\n   * @param navigate bool, whether map should start naviagte\n   * @param navigateTo  where is the point user want navigate to\n   * @param highlightSegmentStart\n   * @param highlightSegmentEnd\n   */\n  updateNavigationState(navigate, navigateTo, highlightSegmentStart, highlightSegmentEnd) {\n    this.setState({\n      navigateTo: navigateTo,\n      navigateDataRequested: false,\n    });\n\n    if (navigate === false) {\n      this.setState({\n        navigate: false,\n      });\n    } else {\n      this.setState({\n        highlightSegmentStart: highlightSegmentStart,\n        highlightSegmentEnd: highlightSegmentEnd,\n        navigate: true,\n      });\n      this.renderPath(navigateTo);\n    }\n  }\n\n  /**\n   * fetch the directions data if the user what to start navigate\n   * @param start\n   * @param end\n   * @returns {Promise<AxiosResponse<any> | never | void>}\n   */\n  getGeometry(start, end) {\n    // https://pedway.azurewebsites.net/api/ors/directions?coordinates=\n    currentSegmentIndex = -1;\n    return axios.get(\n        AZURE_API + '/ors/directions?coordinates='\n      + start[1] + ',%20' + start[0] + '%7C' + end[1] + ',%20' + end[0] + '&profile=foot-walking')\n        .then((json) => {\n          this.props.updateNavigationDataCallback(json);\n          this.state.navigateJSON = json;\n          const geometry = json.data.routes[0].geometry;\n          const coords = polyline.decode(geometry);\n          let retList = [];\n          coords.forEach((item)=>{\n            retList.push(new PedwayCoordinate(item[0], item[1]));\n          });\n          let retSection = new PedwaySection(retList);\n          this.setState({\n            navigateDataRequested: true,\n            navigateList: retSection,\n          });\n          try {\n            let estimateSecond = json.data.routes[0].summary.duration;\n            let estimateMinute = Math.ceil(estimateSecond/60);\n            let warningString = '';\n            if (estimateMinute > 60) {\n              warningString = ' You are too far away from your destination, are you sure to take this path?';\n            }\n            ToastAndroid.showWithGravityAndOffset('Estimate Time: ' + String(estimateMinute) + 'min' + warningString,\n                ToastAndroid.LONG, ToastAndroid.BOTTOM, 0, 350);\n          } catch (e) {\n          }\n        })\n        .catch(this.networkErrorHandler);\n  }\n\n  /**\n   * Handle no network error. Open up a dialog telling the user that he/she loses connection.\n   */\n  networkErrorHandler() {\n    this.setState({dialogTitle: 'Network Error',\n      dialogVisibility: true,\n      dialogButtonText: 'Dismiss',\n      dialogContent: 'There is no network connection. Get back online and try again.'});\n  }\n\n\n  /**\n   * request the API and render a path from this.state.latitude/longitude\n   * to destinationCoordinate's coordinate\n   * the latitdueDelta is the difference between max/min latitdue within a view frame\n   * @param destinationCoordinate\n   */\n  renderPath(destinationCoordinate) {\n    this.getGeometry([this.state.userLatitude, this.state.userLongitude],\n        [destinationCoordinate.getCoordinate().getLatitude(), destinationCoordinate.getCoordinate().getLongitude()]);\n  }\n\n  /**\n   * clear the geolocation watch\n   */\n  componentWillUnmount() {\n    navigator.geolocation.clearWatch(this.state.id);\n  }\n\n  /**\n   * retrun the map makers representing the pedway entrances.\n   * @returns a view that contains all the pedway entrances.\n   */\n  renderMarkers() {\n    if (this.state.searchData.length===0) {\n      return (<RenderEntrance\n        JSONData={this.state.pedwayData}\n        callbackFunc={(input, isEntrance) => {\n          this.forwardSelectedEntrance(input, isEntrance);\n        }}/> +\n        <RenderAttraction JSONData={Attractions}/>\n      );\n    } else {\n      return (<RenderLocation\n        JSONData={this.state.searchData}\n        callbackFunc={(input, isEntrance) => {\n          this.forwardSelectedEntrance(input, isEntrance);\n        }}/>);\n    }\n  }\n\n  /**\n   * Use animation to recenter the camera to the user's current position.\n   */\n  recenter() {\n    const region = {\n      latitude: this.state.userLatitude,\n      longitude: this.state.userLongitude,\n      latitudeDelta: RECENTER_DELTA,\n      longitudeDelta: RECENTER_DELTA,\n    };\n    this.setState({\n      mapInFocus: true,\n    });\n    this.map.animateToRegion(region, 1000);\n    this.updateCurrentSegment(this.state.userLongitude, this.state.userLatitude);\n  }\n\n  /**\n   * callback function that is trigger whenever the map completes a region change\n   * if the map is uninitialized, the initial location is (0,0)\n   * only after the inital region change is completely, we can set mapReady to true\n   * and render the components on the map\n   * We also use this function together with mapOnPanDrag() to determine if a region\n   * change is trigger by the user or done programmatically\n   * @param regionChangedTo\n   */\n  onRegionChangeComplete(regionChangedTo) {\n    this.setState({\n      latitude: regionChangedTo.latitude,\n      longitude: regionChangedTo.longitude,\n      latitudeDelta: regionChangedTo.latitudeDelta,\n      longitudeDelta: regionChangedTo.longitudeDelta,\n    });\n    if (!this.state.mapReady) {\n      this.setState({\n        mapReady: true,\n      });\n    }\n\n    if (isUserInitiatedRegionChange) {\n      this.setState({\n        mapInFocus: false,\n      });\n    }\n\n    if (nextMapState !== undefined) {\n      let stateSave = nextMapState;\n      nextMapState = undefined;\n      this.props.setUnderground(stateSave);\n    }\n\n    isUserInitiatedRegionChange = false;\n  }\n\n  /**\n   * this function gets called whenever user drags the map\n   * we use this function together with onRegionChangeComplete() to determine if\n   * the region change is done by the user or not\n   * the latitdueDelta is the difference between max/min latitdue within a view frame\n   */\n  mapOnPanDrag() {\n    isUserInitiatedRegionChange = true;\n  }\n\n\n  /**\n   * this function is called when the user reached the destination\n   * after a delay of 3 second, display a dialog stating the user have completed navigation\n   * when user clicked 'ok', end this navigation\n   */\n  onReachedDestination() {\n    setTimeout(\n        () => {\n          this.setState({\n            dialogVisibility: true,\n            dialogContent: '',\n            dialogTitle: 'Navigation Completed',\n            dialogButtonText: 'OK',\n          });\n        },\n        2000);\n  }\n\n  render() {\n    let pathToGo = [];\n    let pathHighlight = [];\n    let pathGreyScale = [];\n    if (this.state.navigateDataRequested) {\n      pathToGo = this.state.navigateList.getJSONList();\n      if (this.state.highlightSegment) {\n        pathHighlight = pathToGo.slice(this.state.highlightSegmentStart, this.state.highlightSegmentEnd + 1);\n        if (this.state.greyScaleSegment) {\n          pathGreyScale = pathToGo.slice(0, this.state.highlightSegmentStart + 1);\n        }\n        pathToGo = pathToGo.slice(this.state.highlightSegmentEnd);\n      }\n    }\n\n    return (\n      <View style={StyleSheet.absoluteFillObject}>\n        <FeedbackView\n          ref={(feedbackView) => {\n            this.feedbackView = feedbackView;\n          }}\n        />\n        <Dialog\n          visible={this.state.dialogVisibility}\n          width={0.7}\n          dialogTitle={<DialogTitle title={this.state.dialogTitle}/>}\n          dialogAnimation={new SlideAnimation({\n            slideFrom: 'bottom',\n          })}\n          footer={\n            <DialogFooter>\n              <DialogButton\n                text={this.state.dialogButtonText}\n                onPress={()=>{\n                  this.setState({dialogVisibility: false});\n                  if (this.state.dialogTitle === 'Navigation Completed') {\n                    // we need to end navigation\n                    this.props.endNavigateCallback();\n                  }\n                  if (this.state.dialogTitle === 'Network Error' || this.state.dialogTitle === 'Unable to Route') {\n                    this.props.endNavigateCallback();\n                  }\n                }}\n              />\n            </DialogFooter>\n          }\n          onTouchOutside={() => {\n            this.setState({dialogVisibility: false});\n          }}\n        >{this.state.dialogContent===''?null:\n          <DialogContent>\n            <Text>{this.state.dialogContent}</Text>\n          </DialogContent>}\n        </Dialog>\n        <RoundButton\n          style={this.state.navigate?[styles.positionDown]:[styles.focusButton]}\n          icon={'crosshairs'}\n          func={this.recenter}/>\n        <MapView\n          ref={(mapView) => {\n            this.map = mapView;\n          }}\n          style={styles.mainMap}\n          key={this.state.underground}\n          customMapStyle={this.state.underground? MapStyle : null}\n          initialRegion={{\n            latitude: this.state.latitude,\n            longitude: this.state.longitude,\n            latitudeDelta: this.state.latitudeDelta,\n            longitudeDelta: this.state.longitudeDelta,\n          }}\n          onRegionChangeComplete={this.onRegionChangeComplete}\n          onPanDrag={this.mapOnPanDrag}\n        >\n          {this.state.navigate===true?\n            <View>\n              <Polyline\n                coordinates={pathToGo}\n                strokeColor={this.state.strokeColor}\n                strokeWidth={5}\n                style={{zIndex: 100000}}\n              />\n              <Polyline\n                coordinates={pathHighlight}\n                strokeColor={this.state.highlightStrokeColor}\n                strokeWidth={6}\n                style={{zIndex: 100000}}\n              />\n              <Polyline\n                coordinates={pathGreyScale}\n                strokeColor={this.state.greyScaleStrokeColor}\n                strokeWidth={5}\n                style={{zIndex: 100000}}\n              />\n            </View>:\n            (this.state.searchData.length===0?\n              <View>\n                <RenderEntrance\n                  JSONData={this.state.pedwayData}\n                  callbackFunc={(input, isEntrance) => {\n                    this.forwardSelectedEntrance(input, isEntrance);\n                  }}/>\n                <RenderAttraction\n                  JSONData={Attractions}\n                  callbackFunc={(input, isEntrance) => {\n                    this.forwardSelectedEntrance(input, isEntrance);\n                  }}\n                />\n              </View>:\n              <RenderLocation\n                JSONData={this.state.searchData}\n                callbackFunc={(input, isEntrance) => {\n                  this.forwardSelectedEntrance(input, isEntrance);\n                }}/> )}\n\n          <MapView.Marker\n            coordinate={{\n              latitude: this.state.userLatitude,\n              longitude: this.state.userLongitude,\n            }}\n            style={{zIndex: 10}}\n            title={'You'}\n          >\n            <Image source={circle} style={{width: 25, height: 25}} />\n          </MapView.Marker>\n\n          {this.state.navigate &&\n          <MapView.Marker\n            coordinate={{\n              latitude: this.state.navigateTo.getCoordinate().getLatitude(),\n              longitude: this.state.navigateTo.getCoordinate().getLongitude(),\n            }}\n            style={{zIndex: 10}}\n            pinColor={'#dc143c'}\n          />\n          }\n          {this.state.underground && this.state.mapReady?\n          <RenderPedway JSONData={PedwaySections}/>:null}\n        </MapView>\n      </View>);\n  }\n}\n\n",
    "static": true,
    "longname": "/Users/arivval/Documents/Courseworks/CS428/pedway4/pedway/pedwayApp/components/GroundMapView/GroundMapView.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 109,
    "kind": "variable",
    "name": "AZURE_API",
    "memberof": "components/GroundMapView/GroundMapView.js",
    "static": true,
    "longname": "components/GroundMapView/GroundMapView.js~AZURE_API",
    "access": "public",
    "export": false,
    "importPath": "ReactNativeTest/components/GroundMapView/GroundMapView.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 27,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 110,
    "kind": "variable",
    "name": "INITIAL_LATITUDE",
    "memberof": "components/GroundMapView/GroundMapView.js",
    "static": true,
    "longname": "components/GroundMapView/GroundMapView.js~INITIAL_LATITUDE",
    "access": "public",
    "export": false,
    "importPath": "ReactNativeTest/components/GroundMapView/GroundMapView.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 29,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 111,
    "kind": "variable",
    "name": "INITIAL_LONGITUDE",
    "memberof": "components/GroundMapView/GroundMapView.js",
    "static": true,
    "longname": "components/GroundMapView/GroundMapView.js~INITIAL_LONGITUDE",
    "access": "public",
    "export": false,
    "importPath": "ReactNativeTest/components/GroundMapView/GroundMapView.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 30,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 112,
    "kind": "variable",
    "name": "INITIAL_DELTA",
    "memberof": "components/GroundMapView/GroundMapView.js",
    "static": true,
    "longname": "components/GroundMapView/GroundMapView.js~INITIAL_DELTA",
    "access": "public",
    "export": false,
    "importPath": "ReactNativeTest/components/GroundMapView/GroundMapView.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 31,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 113,
    "kind": "variable",
    "name": "RECENTER_DELTA",
    "memberof": "components/GroundMapView/GroundMapView.js",
    "static": true,
    "longname": "components/GroundMapView/GroundMapView.js~RECENTER_DELTA",
    "access": "public",
    "export": false,
    "importPath": "ReactNativeTest/components/GroundMapView/GroundMapView.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 32,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 114,
    "kind": "variable",
    "name": "MAXIMUM_OFFSET_DISTANCE",
    "memberof": "components/GroundMapView/GroundMapView.js",
    "static": true,
    "longname": "components/GroundMapView/GroundMapView.js~MAXIMUM_OFFSET_DISTANCE",
    "access": "public",
    "export": false,
    "importPath": "ReactNativeTest/components/GroundMapView/GroundMapView.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 33,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 115,
    "kind": "variable",
    "name": "LOCATION_SERVICE_AVAILABLE",
    "memberof": "components/GroundMapView/GroundMapView.js",
    "static": true,
    "longname": "components/GroundMapView/GroundMapView.js~LOCATION_SERVICE_AVAILABLE",
    "access": "public",
    "export": false,
    "importPath": "ReactNativeTest/components/GroundMapView/GroundMapView.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 35,
    "undocument": true,
    "type": {
      "types": [
        "boolean"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 116,
    "kind": "variable",
    "name": "isUserInitiatedRegionChange",
    "memberof": "components/GroundMapView/GroundMapView.js",
    "static": true,
    "longname": "components/GroundMapView/GroundMapView.js~isUserInitiatedRegionChange",
    "access": "public",
    "export": false,
    "importPath": "ReactNativeTest/components/GroundMapView/GroundMapView.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 38,
    "undocument": true,
    "type": {
      "types": [
        "boolean"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 117,
    "kind": "variable",
    "name": "appInitiated",
    "memberof": "components/GroundMapView/GroundMapView.js",
    "static": true,
    "longname": "components/GroundMapView/GroundMapView.js~appInitiated",
    "access": "public",
    "export": false,
    "importPath": "ReactNativeTest/components/GroundMapView/GroundMapView.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 39,
    "undocument": true,
    "type": {
      "types": [
        "boolean"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 118,
    "kind": "variable",
    "name": "nextMapState",
    "memberof": "components/GroundMapView/GroundMapView.js",
    "static": true,
    "longname": "components/GroundMapView/GroundMapView.js~nextMapState",
    "access": "public",
    "export": false,
    "importPath": "ReactNativeTest/components/GroundMapView/GroundMapView.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 40,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 119,
    "kind": "variable",
    "name": "currentSegmentIndex",
    "memberof": "components/GroundMapView/GroundMapView.js",
    "static": true,
    "longname": "components/GroundMapView/GroundMapView.js~currentSegmentIndex",
    "access": "public",
    "export": false,
    "importPath": "ReactNativeTest/components/GroundMapView/GroundMapView.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 42,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 120,
    "kind": "class",
    "name": "GroundMapView",
    "memberof": "components/GroundMapView/GroundMapView.js",
    "static": true,
    "longname": "components/GroundMapView/GroundMapView.js~GroundMapView",
    "access": "public",
    "export": true,
    "importPath": "ReactNativeTest/components/GroundMapView/GroundMapView.js",
    "importStyle": "GroundMapView",
    "description": "Renders a MapView that display the ground level map\nwe are setting provider to null and UrlTile to OpenStreetMap's API\nto use OSM\nIf highlight segment is true, highlight color used for indexes within start and end\nIf greyscale is also true, grey scale color will be used for indexes < start index\nThe initial highlight segment is 0 to 1, only highlighting the first line in a route",
    "lineNumber": 52,
    "interface": false,
    "extends": [
      "react~React.Component"
    ]
  },
  {
    "__docId__": 121,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "components/GroundMapView/GroundMapView.js~GroundMapView",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "components/GroundMapView/GroundMapView.js~GroundMapView#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 53,
    "undocument": true
  },
  {
    "__docId__": 122,
    "kind": "member",
    "name": "state",
    "memberof": "components/GroundMapView/GroundMapView.js~GroundMapView",
    "static": false,
    "longname": "components/GroundMapView/GroundMapView.js~GroundMapView#state",
    "access": "public",
    "description": null,
    "lineNumber": 55,
    "undocument": true,
    "type": {
      "types": [
        "{\"latitude\": *, \"longitude\": *, \"latitudeDelta\": *, \"longitudeDelta\": *, \"userLatitude\": *, \"userLongitude\": *, \"error\": *, \"pedwayData\": *, \"updateGeoLocation\": boolean, \"id\": *, \"navigate\": *, \"navigateTo\": *, \"navigateDataRequested\": *, \"navigateJSON\": *, \"searchData\": *, \"navigateList\": *, \"highlightSegment\": boolean, \"greyScaleSegment\": boolean, \"highlightSegmentStart\": *, \"highlightSegmentEnd\": number, \"strokeColor\": string, \"highlightStrokeColor\": string, \"greyScaleStrokeColor\": string, \"underground\": *, \"mapReady\": *, \"mapInFocus\": boolean, \"dialogVisibility\": *, \"dialogContent\": *, \"dialogTitle\": *, \"dialogButtonText\": *}"
      ]
    }
  },
  {
    "__docId__": 145,
    "kind": "method",
    "name": "requestEntranceData",
    "memberof": "components/GroundMapView/GroundMapView.js~GroundMapView",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "components/GroundMapView/GroundMapView.js~GroundMapView#requestEntranceData",
    "access": "public",
    "description": "Fetch the pedway entrance geoJSON data from the back end",
    "lineNumber": 114,
    "params": [],
    "return": null
  },
  {
    "__docId__": 146,
    "kind": "method",
    "name": "setSearchData",
    "memberof": "components/GroundMapView/GroundMapView.js~GroundMapView",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "components/GroundMapView/GroundMapView.js~GroundMapView#setSearchData",
    "access": "public",
    "description": null,
    "lineNumber": 124,
    "undocument": true,
    "params": [
      {
        "name": "data",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 147,
    "kind": "method",
    "name": "setMapInFocus",
    "memberof": "components/GroundMapView/GroundMapView.js~GroundMapView",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "components/GroundMapView/GroundMapView.js~GroundMapView#setMapInFocus",
    "access": "public",
    "description": null,
    "lineNumber": 130,
    "undocument": true,
    "params": [
      {
        "name": "input",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 148,
    "kind": "method",
    "name": "positionDidUpdateCallback",
    "memberof": "components/GroundMapView/GroundMapView.js~GroundMapView",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "components/GroundMapView/GroundMapView.js~GroundMapView#positionDidUpdateCallback",
    "access": "public",
    "description": "callBack function for refocusing the map and navigation whenever user position is updated",
    "lineNumber": 141,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "position",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "id",
        "description": "reference for the listener (so we can unmount it)"
      }
    ],
    "return": null
  },
  {
    "__docId__": 149,
    "kind": "method",
    "name": "displayFeedbackWindow",
    "memberof": "components/GroundMapView/GroundMapView.js~GroundMapView",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "components/GroundMapView/GroundMapView.js~GroundMapView#displayFeedbackWindow",
    "access": "public",
    "description": "get the /node id of the entrance, and make the api request",
    "lineNumber": 179,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "index",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 150,
    "kind": "method",
    "name": "componentDidMount",
    "memberof": "components/GroundMapView/GroundMapView.js~GroundMapView",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "components/GroundMapView/GroundMapView.js~GroundMapView#componentDidMount",
    "access": "public",
    "description": "watch user's real time location and update the map accordingly.\nalso check if have location permission or not, if no permission, toast no permission",
    "lineNumber": 193,
    "params": [],
    "return": null
  },
  {
    "__docId__": 151,
    "kind": "method",
    "name": "updateCurrentSegment",
    "memberof": "components/GroundMapView/GroundMapView.js~GroundMapView",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "components/GroundMapView/GroundMapView.js~GroundMapView#updateCurrentSegment",
    "access": "public",
    "description": "this function is called when user is navigation. Update the user's current segment",
    "lineNumber": 221,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "longitude",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "latitude",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 152,
    "kind": "method",
    "name": "getCurrentClosestSegment",
    "memberof": "components/GroundMapView/GroundMapView.js~GroundMapView",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "components/GroundMapView/GroundMapView.js~GroundMapView#getCurrentClosestSegment",
    "access": "public",
    "description": "Helper for updateCurrentSegment, use turf to calculate the user's closest segment in navigation path\nTake in user's current location and parses the user's current route from geoJSON representation into\nturf data structure.\nThen we can use the pointToLineDistance() method from turf to find out what step is the user currently\non in his/her route\nWe then return that closest segment and the index of that segment in the list\nIf this function finds the users is away from the closest section more than 50 meter,\nit will call recalculatePath() to recalculate",
    "lineNumber": 249,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{*[]}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "longitude",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "latitude",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "*[]"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 153,
    "kind": "method",
    "name": "updateMapMode",
    "memberof": "components/GroundMapView/GroundMapView.js~GroundMapView",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "components/GroundMapView/GroundMapView.js~GroundMapView#updateMapMode",
    "access": "public",
    "description": "pass in the next idx the user is about to enter, check if the user is about to enter the pedway or not",
    "lineNumber": 328,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "idx",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 154,
    "kind": "method",
    "name": "findOntoString",
    "memberof": "components/GroundMapView/GroundMapView.js~GroundMapView",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "components/GroundMapView/GroundMapView.js~GroundMapView#findOntoString",
    "access": "public",
    "description": "parse the 'onto someRoad' in the instruction, if 'someRoad' === 'pedway', we need to show the suggestion toast\nsuggesting the user to use the underground mode",
    "lineNumber": 339,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "instruction",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 155,
    "kind": "method",
    "name": "showSuggestionToast",
    "memberof": "components/GroundMapView/GroundMapView.js~GroundMapView",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "components/GroundMapView/GroundMapView.js~GroundMapView#showSuggestionToast",
    "access": "public",
    "description": "suggest user to take the pedway",
    "lineNumber": 361,
    "params": [],
    "return": null
  },
  {
    "__docId__": 156,
    "kind": "method",
    "name": "forwardSelectedEntrance",
    "memberof": "components/GroundMapView/GroundMapView.js~GroundMapView",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "components/GroundMapView/GroundMapView.js~GroundMapView#forwardSelectedEntrance",
    "access": "public",
    "description": "tell app component which entrance/attraction the user have selected\nalso make api request to the backend to get the updated status of the entrance\nif there is a status change, we need to update our data stored in the app",
    "lineNumber": 372,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "inputEntrance",
        "description": "data of the entrance/attration"
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "isEntrance",
        "description": "whether the selected marker is entrance or not"
      }
    ],
    "return": null
  },
  {
    "__docId__": 157,
    "kind": "method",
    "name": "recalculatePath",
    "memberof": "components/GroundMapView/GroundMapView.js~GroundMapView",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "components/GroundMapView/GroundMapView.js~GroundMapView#recalculatePath",
    "access": "public",
    "description": "This function is called whenever the user deviates from the path,\nrequest a new path based on the location, and reset the UI for navigation",
    "lineNumber": 403,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "newLongitude",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "newLatitude",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 158,
    "kind": "method",
    "name": "componentWillReceiveProps",
    "memberof": "components/GroundMapView/GroundMapView.js~GroundMapView",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "components/GroundMapView/GroundMapView.js~GroundMapView#componentWillReceiveProps",
    "access": "public",
    "description": null,
    "lineNumber": 413,
    "undocument": true,
    "params": [
      {
        "name": "nextProps",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 159,
    "kind": "method",
    "name": "updateHighlightSegment",
    "memberof": "components/GroundMapView/GroundMapView.js~GroundMapView",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "components/GroundMapView/GroundMapView.js~GroundMapView#updateHighlightSegment",
    "access": "public",
    "description": "update the highlight segment of the line shown during routing to the start and end index",
    "lineNumber": 426,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "highlightSegmentStart",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "highlightSegmentEnd",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 160,
    "kind": "method",
    "name": "updateNavigationState",
    "memberof": "components/GroundMapView/GroundMapView.js~GroundMapView",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "components/GroundMapView/GroundMapView.js~GroundMapView#updateNavigationState",
    "access": "public",
    "description": "helper function for app component to call\nalso pass in the initial highlight segment start end index",
    "lineNumber": 443,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "navigate",
        "description": "bool, whether map should start naviagte"
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "navigateTo",
        "description": "where is the point user want navigate to"
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "highlightSegmentStart",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "highlightSegmentEnd",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 161,
    "kind": "method",
    "name": "getGeometry",
    "memberof": "components/GroundMapView/GroundMapView.js~GroundMapView",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "components/GroundMapView/GroundMapView.js~GroundMapView#getGeometry",
    "access": "public",
    "description": "fetch the directions data if the user what to start navigate",
    "lineNumber": 469,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise<AxiosResponse<any> | never | void>}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "start",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "end",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<AxiosResponse<any> | never | void>"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 162,
    "kind": "method",
    "name": "networkErrorHandler",
    "memberof": "components/GroundMapView/GroundMapView.js~GroundMapView",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "components/GroundMapView/GroundMapView.js~GroundMapView#networkErrorHandler",
    "access": "public",
    "description": "Handle no network error. Open up a dialog telling the user that he/she loses connection.",
    "lineNumber": 507,
    "params": [],
    "return": null
  },
  {
    "__docId__": 163,
    "kind": "method",
    "name": "renderPath",
    "memberof": "components/GroundMapView/GroundMapView.js~GroundMapView",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "components/GroundMapView/GroundMapView.js~GroundMapView#renderPath",
    "access": "public",
    "description": "request the API and render a path from this.state.latitude/longitude\nto destinationCoordinate's coordinate\nthe latitdueDelta is the difference between max/min latitdue within a view frame",
    "lineNumber": 521,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "destinationCoordinate",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 164,
    "kind": "method",
    "name": "componentWillUnmount",
    "memberof": "components/GroundMapView/GroundMapView.js~GroundMapView",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "components/GroundMapView/GroundMapView.js~GroundMapView#componentWillUnmount",
    "access": "public",
    "description": "clear the geolocation watch",
    "lineNumber": 529,
    "params": [],
    "return": null
  },
  {
    "__docId__": 165,
    "kind": "method",
    "name": "renderMarkers",
    "memberof": "components/GroundMapView/GroundMapView.js~GroundMapView",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "components/GroundMapView/GroundMapView.js~GroundMapView#renderMarkers",
    "access": "public",
    "description": "retrun the map makers representing the pedway entrances.",
    "lineNumber": 537,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "a view that contains all the pedway entrances."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": "a view that contains all the pedway entrances."
    },
    "params": []
  },
  {
    "__docId__": 166,
    "kind": "method",
    "name": "recenter",
    "memberof": "components/GroundMapView/GroundMapView.js~GroundMapView",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "components/GroundMapView/GroundMapView.js~GroundMapView#recenter",
    "access": "public",
    "description": "Use animation to recenter the camera to the user's current position.",
    "lineNumber": 558,
    "params": [],
    "return": null
  },
  {
    "__docId__": 167,
    "kind": "method",
    "name": "onRegionChangeComplete",
    "memberof": "components/GroundMapView/GroundMapView.js~GroundMapView",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "components/GroundMapView/GroundMapView.js~GroundMapView#onRegionChangeComplete",
    "access": "public",
    "description": "callback function that is trigger whenever the map completes a region change\nif the map is uninitialized, the initial location is (0,0)\nonly after the inital region change is completely, we can set mapReady to true\nand render the components on the map\nWe also use this function together with mapOnPanDrag() to determine if a region\nchange is trigger by the user or done programmatically",
    "lineNumber": 581,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "regionChangedTo",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 168,
    "kind": "method",
    "name": "mapOnPanDrag",
    "memberof": "components/GroundMapView/GroundMapView.js~GroundMapView",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "components/GroundMapView/GroundMapView.js~GroundMapView#mapOnPanDrag",
    "access": "public",
    "description": "this function gets called whenever user drags the map\nwe use this function together with onRegionChangeComplete() to determine if\nthe region change is done by the user or not\nthe latitdueDelta is the difference between max/min latitdue within a view frame",
    "lineNumber": 615,
    "params": [],
    "return": null
  },
  {
    "__docId__": 169,
    "kind": "method",
    "name": "onReachedDestination",
    "memberof": "components/GroundMapView/GroundMapView.js~GroundMapView",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "components/GroundMapView/GroundMapView.js~GroundMapView#onReachedDestination",
    "access": "public",
    "description": "this function is called when the user reached the destination\nafter a delay of 3 second, display a dialog stating the user have completed navigation\nwhen user clicked 'ok', end this navigation",
    "lineNumber": 625,
    "params": [],
    "return": null
  },
  {
    "__docId__": 170,
    "kind": "method",
    "name": "render",
    "memberof": "components/GroundMapView/GroundMapView.js~GroundMapView",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "components/GroundMapView/GroundMapView.js~GroundMapView#render",
    "access": "public",
    "description": null,
    "lineNumber": 638,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 171,
    "kind": "member",
    "name": "feedbackView",
    "memberof": "components/GroundMapView/GroundMapView.js~GroundMapView",
    "static": false,
    "longname": "components/GroundMapView/GroundMapView.js~GroundMapView#feedbackView",
    "access": "public",
    "description": null,
    "lineNumber": 657,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 172,
    "kind": "member",
    "name": "map",
    "memberof": "components/GroundMapView/GroundMapView.js~GroundMapView",
    "static": false,
    "longname": "components/GroundMapView/GroundMapView.js~GroundMapView#map",
    "access": "public",
    "description": null,
    "lineNumber": 698,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 173,
    "kind": "file",
    "name": "components/IconButton/IconButton.js",
    "content": "import React, {Component} from 'react';\nimport styles from './styles';\nimport {TouchableOpacity, View} from 'react-native';\nimport Icon from 'react-native-vector-icons/FontAwesome';\n\n/**\n * renders an Icon with an onClicklistener, icon and size can be customized by passing in props\n */\nexport default class IconButton extends React.Component {\n  render() {\n    return (\n      <TouchableOpacity\n        style={[this.props.style, styles.iconButton]}\n        onPress={this.props.func}>\n        <View style={{\n          flexGrow: 1,\n          justifyContent: 'center',\n          alignItems: 'center',\n        }}>\n          <Icon\n            name={this.props.icon}\n            size={this.props.size===undefined?20:this.props.size}\n            color=\"#555\"\n          />\n        </View>\n      </TouchableOpacity>\n    );\n  }\n}\n\n",
    "static": true,
    "longname": "/Users/arivval/Documents/Courseworks/CS428/pedway4/pedway/pedwayApp/components/IconButton/IconButton.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 174,
    "kind": "class",
    "name": "IconButton",
    "memberof": "components/IconButton/IconButton.js",
    "static": true,
    "longname": "components/IconButton/IconButton.js~IconButton",
    "access": "public",
    "export": true,
    "importPath": "ReactNativeTest/components/IconButton/IconButton.js",
    "importStyle": "IconButton",
    "description": "renders an Icon with an onClicklistener, icon and size can be customized by passing in props",
    "lineNumber": 9,
    "interface": false,
    "extends": [
      "react~React.Component"
    ]
  },
  {
    "__docId__": 175,
    "kind": "method",
    "name": "render",
    "memberof": "components/IconButton/IconButton.js~IconButton",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "components/IconButton/IconButton.js~IconButton#render",
    "access": "public",
    "description": null,
    "lineNumber": 10,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 176,
    "kind": "file",
    "name": "components/IconButton/styles.js",
    "content": "import {StyleSheet} from 'react-native';\n\nconst styles = StyleSheet.create({\n  iconButton: {\n    zIndex: 2,\n    backgroundColor: 'rgba(0,0,0,0.0)',\n  },\n});\n\nexport default styles;\n",
    "static": true,
    "longname": "/Users/arivval/Documents/Courseworks/CS428/pedway4/pedway/pedwayApp/components/IconButton/styles.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 177,
    "kind": "variable",
    "name": "styles",
    "memberof": "components/IconButton/styles.js",
    "static": true,
    "longname": "components/IconButton/styles.js~styles",
    "access": "public",
    "export": true,
    "importPath": "ReactNativeTest/components/IconButton/styles.js",
    "importStyle": "styles",
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 178,
    "kind": "file",
    "name": "components/NavigationSwipeView/NavigationSwipeView.js",
    "content": "import React, {Component} from 'react';\nimport styles from './styles';\nimport {TouchableOpacity, View, ActivityIndicator, Text} from 'react-native';\nimport Icon from 'react-native-vector-icons/FontAwesome';\nimport Swiper from 'react-native-swiper';\n\n// map of way types to icon names\n// for more information checkout https://github.com/GIScience/openrouteservice-docs/blob/master/README.md\nlet vectorIconDisplayList = [\n  'long-arrow-left',\n  'long-arrow-right',\n  'long-arrow-left',\n  'long-arrow-right',\n  'long-arrow-left',\n  'long-arrow-right',\n  'long-arrow-up',\n  'long-arrow-up',\n  'long-arrow-up',\n  'long-arrow-down',\n  'flag',\n  'home',\n  'long-arrow-left',\n  'long-arrow-right',\n];\n\nlet isProgrammaticallyUpdatingIndex = false;\n/**\n * Swiper view based component that displays a list of navigation instructions\n * User can swipe to view the instructions\n * If user is centered on himself/herself(in focus mode), while user is walking, this swiper would swipe automatically\n * to display the most up-to-date instruction\n */\n\nexport default class NavigationSwipeView extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      navigationData: [],\n      currentIndex: 0,\n      dataRequested: false,\n      previousIndex: 0,\n    };\n    this.updateState = this.updateState.bind(this);\n    this.onIndexChanged = this.onIndexChanged.bind(this);\n    this.updateSwiperViewIndex = this.updateSwiperViewIndex.bind(this);\n    this.onMomentumScrollEnd = this.onMomentumScrollEnd.bind(this);\n  }\n\n  componentDidMount() {\n    this.updateState(this.props);\n  }\n\n  componentWillReceiveProps(nextProps) {\n    this.setState({\n      // previousIndex: this.state.currentIndex,\n    }, () => {\n      if (nextProps.navigationData !== this.state.navigationData) {\n        this.updateState(nextProps);\n      }\n    });\n  }\n\n  updateState(inputProps) {\n    this.updateSwiperViewIndex(0);\n    this.setState({\n      navigationData: inputProps.navigationData,\n      dataRequested: inputProps.navigationDataRequested,\n      currentIndex: 0,\n    });\n\n    // set the highlight segment for the path in groundmap to the initial segment\n    try {\n      let route = inputProps.navigationData['data']['routes'][0];\n      let wayPoint = route['segments'][0]['steps'][0]['way_points'];\n      this.props.updateSegmentStartEndCallback(wayPoint[0], wayPoint[1]);\n    } catch (e) {}\n  }\n\n  /**\n   * Takes in a 0 indexed index variable, and update the swiper view's index to that variable\n   * @param idx\n   */\n  updateSwiperViewIndex(idx) {\n    if (this.state.dataRequested) {\n      isProgrammaticallyUpdatingIndex = true;\n      this.swiper.scrollBy(idx - this.state.currentIndex + this.state.previousIndex, true);\n    }\n  }\n\n  /**\n   * callBack function that is triggered whenever the swiper view's index changes\n   * this function also calls the corresponding function to update the highlighted segment on the mapView\n   * @param inputIndex\n   */\n  onIndexChanged(inputIndex) {\n    let acutalIndex = inputIndex + this.state.previousIndex;\n    try {\n      this.setState({\n        currentIndex: acutalIndex,\n      });\n\n      let route = this.state.navigationData['data']['routes'][0];\n      let wayPoint = route['segments'][0]['steps'][acutalIndex]['way_points'];\n      this.props.updateSegmentStartEndCallback(wayPoint[0], wayPoint[1]);\n    } catch (e) {\n    }\n  }\n\n  /**\n   * listener that is called when the scroll animation ended\n   * we use the global isProgrammaticallyUpdatingIndex is check if this is due to a user swipe or not\n   * if it is due to a user swipe, to need to set the focus mode of the groundmapView to false\n   */\n  onMomentumScrollEnd() {\n    // if user is scrolling it, we need to unlock the mapView to let it not in focus\n    if (!isProgrammaticallyUpdatingIndex) {\n      this.props.setMapInFocus(false);\n    }\n    isProgrammaticallyUpdatingIndex = false;\n  }\n\n  render() {\n    if (this.state.dataRequested === false) {\n      return (\n        <View style={styles.outerContainer}>\n          <View style={styles.innerContainer}>\n            <ActivityIndicator\n              size='large'\n              color='#fff'\n              animating={true}\n              style={styles.activityIndicator}\n            />\n          </View>\n        </View>\n      );\n    } else {\n      // right now using the first route\n      let navigationData = [];\n      try {\n        navigationData = this.state.navigationData['data']['routes'][0]['segments'][0]['steps'];\n      } catch (e) {\n      }\n      let swiperViewData = navigationData.map((item, idx)=>{\n        return (\n          <View style={styles.rowFlexContainer} key={idx}>\n            <View style={styles.iconOuterContainer}>\n              <View style={styles.iconInnerContainer}>\n                <Icon name={vectorIconDisplayList[item['type']]} style={styles.instructionIcon}/>\n              </View>\n            </View>\n            <View style={styles.colFlexContainer}>\n              <Text style={styles.instructionLabel} numberOfLines={3}>{item['instruction']}</Text>\n              <Text style={styles.distanceLabel}>{ + (idx + 1) + '/' +\n              this.state.navigationData['data']['routes'][0]['segments'][0]['steps'].length +\n              '  ' + item['distance'] + 'm'}</Text>\n            </View>\n          </View>\n        );\n      });\n      return (\n        <View style={styles.outerContainer}>\n          <View style={styles.innerContainer}>\n            <Swiper\n              loop={false}\n              showsButton={true}\n              showsPagination={false}\n              onIndexChanged={this.onIndexChanged}\n              onMomentumScrollEnd={this.onMomentumScrollEnd}\n              ref={(swiper) => {\n                this.swiper = swiper;\n              }}>\n              { swiperViewData }\n            </Swiper>\n          </View>\n        </View>\n      );\n    }\n  }\n}\n",
    "static": true,
    "longname": "/Users/arivval/Documents/Courseworks/CS428/pedway4/pedway/pedwayApp/components/NavigationSwipeView/NavigationSwipeView.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 179,
    "kind": "variable",
    "name": "vectorIconDisplayList",
    "memberof": "components/NavigationSwipeView/NavigationSwipeView.js",
    "static": true,
    "longname": "components/NavigationSwipeView/NavigationSwipeView.js~vectorIconDisplayList",
    "access": "public",
    "export": false,
    "importPath": "ReactNativeTest/components/NavigationSwipeView/NavigationSwipeView.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 9,
    "undocument": true,
    "type": {
      "types": [
        "string[]"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 180,
    "kind": "variable",
    "name": "isProgrammaticallyUpdatingIndex",
    "memberof": "components/NavigationSwipeView/NavigationSwipeView.js",
    "static": true,
    "longname": "components/NavigationSwipeView/NavigationSwipeView.js~isProgrammaticallyUpdatingIndex",
    "access": "public",
    "export": false,
    "importPath": "ReactNativeTest/components/NavigationSwipeView/NavigationSwipeView.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 26,
    "undocument": true,
    "type": {
      "types": [
        "boolean"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 181,
    "kind": "class",
    "name": "NavigationSwipeView",
    "memberof": "components/NavigationSwipeView/NavigationSwipeView.js",
    "static": true,
    "longname": "components/NavigationSwipeView/NavigationSwipeView.js~NavigationSwipeView",
    "access": "public",
    "export": true,
    "importPath": "ReactNativeTest/components/NavigationSwipeView/NavigationSwipeView.js",
    "importStyle": "NavigationSwipeView",
    "description": "Swiper view based component that displays a list of navigation instructions\nUser can swipe to view the instructions\nIf user is centered on himself/herself(in focus mode), while user is walking, this swiper would swipe automatically\nto display the most up-to-date instruction",
    "lineNumber": 34,
    "interface": false,
    "extends": [
      "react~React.Component"
    ]
  },
  {
    "__docId__": 182,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "components/NavigationSwipeView/NavigationSwipeView.js~NavigationSwipeView",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "components/NavigationSwipeView/NavigationSwipeView.js~NavigationSwipeView#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 35,
    "undocument": true
  },
  {
    "__docId__": 183,
    "kind": "member",
    "name": "state",
    "memberof": "components/NavigationSwipeView/NavigationSwipeView.js~NavigationSwipeView",
    "static": false,
    "longname": "components/NavigationSwipeView/NavigationSwipeView.js~NavigationSwipeView#state",
    "access": "public",
    "description": null,
    "lineNumber": 37,
    "undocument": true,
    "type": {
      "types": [
        "{\"navigationData\": *, \"currentIndex\": *, \"dataRequested\": *, \"previousIndex\": *}"
      ]
    }
  },
  {
    "__docId__": 188,
    "kind": "method",
    "name": "componentDidMount",
    "memberof": "components/NavigationSwipeView/NavigationSwipeView.js~NavigationSwipeView",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "components/NavigationSwipeView/NavigationSwipeView.js~NavigationSwipeView#componentDidMount",
    "access": "public",
    "description": null,
    "lineNumber": 49,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 189,
    "kind": "method",
    "name": "componentWillReceiveProps",
    "memberof": "components/NavigationSwipeView/NavigationSwipeView.js~NavigationSwipeView",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "components/NavigationSwipeView/NavigationSwipeView.js~NavigationSwipeView#componentWillReceiveProps",
    "access": "public",
    "description": null,
    "lineNumber": 53,
    "undocument": true,
    "params": [
      {
        "name": "nextProps",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 190,
    "kind": "method",
    "name": "updateState",
    "memberof": "components/NavigationSwipeView/NavigationSwipeView.js~NavigationSwipeView",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "components/NavigationSwipeView/NavigationSwipeView.js~NavigationSwipeView#updateState",
    "access": "public",
    "description": null,
    "lineNumber": 63,
    "undocument": true,
    "params": [
      {
        "name": "inputProps",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 191,
    "kind": "method",
    "name": "updateSwiperViewIndex",
    "memberof": "components/NavigationSwipeView/NavigationSwipeView.js~NavigationSwipeView",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "components/NavigationSwipeView/NavigationSwipeView.js~NavigationSwipeView#updateSwiperViewIndex",
    "access": "public",
    "description": "Takes in a 0 indexed index variable, and update the swiper view's index to that variable",
    "lineNumber": 83,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "idx",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 192,
    "kind": "method",
    "name": "onIndexChanged",
    "memberof": "components/NavigationSwipeView/NavigationSwipeView.js~NavigationSwipeView",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "components/NavigationSwipeView/NavigationSwipeView.js~NavigationSwipeView#onIndexChanged",
    "access": "public",
    "description": "callBack function that is triggered whenever the swiper view's index changes\nthis function also calls the corresponding function to update the highlighted segment on the mapView",
    "lineNumber": 95,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "inputIndex",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 193,
    "kind": "method",
    "name": "onMomentumScrollEnd",
    "memberof": "components/NavigationSwipeView/NavigationSwipeView.js~NavigationSwipeView",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "components/NavigationSwipeView/NavigationSwipeView.js~NavigationSwipeView#onMomentumScrollEnd",
    "access": "public",
    "description": "listener that is called when the scroll animation ended\nwe use the global isProgrammaticallyUpdatingIndex is check if this is due to a user swipe or not\nif it is due to a user swipe, to need to set the focus mode of the groundmapView to false",
    "lineNumber": 114,
    "params": [],
    "return": null
  },
  {
    "__docId__": 194,
    "kind": "method",
    "name": "render",
    "memberof": "components/NavigationSwipeView/NavigationSwipeView.js~NavigationSwipeView",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "components/NavigationSwipeView/NavigationSwipeView.js~NavigationSwipeView#render",
    "access": "public",
    "description": null,
    "lineNumber": 122,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 195,
    "kind": "member",
    "name": "swiper",
    "memberof": "components/NavigationSwipeView/NavigationSwipeView.js~NavigationSwipeView",
    "static": false,
    "longname": "components/NavigationSwipeView/NavigationSwipeView.js~NavigationSwipeView#swiper",
    "access": "public",
    "description": null,
    "lineNumber": 170,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 196,
    "kind": "file",
    "name": "components/NavigationSwipeView/styles.js",
    "content": "import {StyleSheet} from 'react-native';\n\nconst styles = StyleSheet.create({\n  outerContainer: {\n    backgroundColor: '#4185f4',\n    height: 140,\n    zIndex: 10,\n  },\n  innerContainer: {\n    flex: 1,\n    justifyContent: 'center',\n  },\n  activityIndicator: {\n  },\n  rowFlexContainer: {\n    flex: 1,\n    flexDirection: 'row',\n    alignItems: 'center',\n  },\n  iconOuterContainer: {\n    width: 80,\n    height: 80,\n  },\n  iconInnerContainer: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n  colFlexContainer: {\n    flex: 1,\n    flexDirection: 'column',\n    alignItems: 'flex-start',\n\n  },\n  instructionIcon: {\n    fontSize: 35,\n    color: 'white',\n  },\n  instructionLabel: {\n    fontSize: 27,\n    color: 'white',\n    marginRight: 6,\n  },\n  distanceLabel: {\n    fontSize: 13,\n    color: 'white',\n    marginTop: 10,\n    marginBottom: 6,\n\n  },\n});\n\nexport default styles;\n",
    "static": true,
    "longname": "/Users/arivval/Documents/Courseworks/CS428/pedway4/pedway/pedwayApp/components/NavigationSwipeView/styles.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 197,
    "kind": "variable",
    "name": "styles",
    "memberof": "components/NavigationSwipeView/styles.js",
    "static": true,
    "longname": "components/NavigationSwipeView/styles.js~styles",
    "access": "public",
    "export": true,
    "importPath": "ReactNativeTest/components/NavigationSwipeView/styles.js",
    "importStyle": "styles",
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 198,
    "kind": "file",
    "name": "components/PDFMap/PDFMap.js",
    "content": "import styles from './styles';\nimport {Text, TouchableOpacity, View, Image} from 'react-native';\nimport React, {Component} from 'react';\n\n/**\n * Renders a screen displaying the official map\n * of the Pedway system, which can be accessed\n * when the user is offline\n */\nexport default class PDFMap extends React.Component {\n  render() {\n    return (\n      <View style={styles.container}>\n        <Text style={styles.header}> City of Chicago Pedway System </Text>\n        <Image\n          style={styles.stretch}\n          source={{uri: 'https://s3.amazonaws.com/luxechicago/wp-content/uploads/2017/12/01132557/CityOfChicago_PedwayMapWithLogo_800x469.jpg'}}\n        />\n      </View>\n    );\n  }\n}\n",
    "static": true,
    "longname": "/Users/arivval/Documents/Courseworks/CS428/pedway4/pedway/pedwayApp/components/PDFMap/PDFMap.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 199,
    "kind": "class",
    "name": "PDFMap",
    "memberof": "components/PDFMap/PDFMap.js",
    "static": true,
    "longname": "components/PDFMap/PDFMap.js~PDFMap",
    "access": "public",
    "export": true,
    "importPath": "ReactNativeTest/components/PDFMap/PDFMap.js",
    "importStyle": "PDFMap",
    "description": "Renders a screen displaying the official map\nof the Pedway system, which can be accessed\nwhen the user is offline",
    "lineNumber": 10,
    "interface": false,
    "extends": [
      "react~React.Component"
    ]
  },
  {
    "__docId__": 200,
    "kind": "method",
    "name": "render",
    "memberof": "components/PDFMap/PDFMap.js~PDFMap",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "components/PDFMap/PDFMap.js~PDFMap#render",
    "access": "public",
    "description": null,
    "lineNumber": 11,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 201,
    "kind": "file",
    "name": "components/PDFMap/styles.js",
    "content": "import {StyleSheet} from 'react-native';\n\nexport default StyleSheet.create({\n  container: {\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n  header: {\n    textAlign: 'center',\n    fontSize: 40,\n    fontWeight: 'bold',\n    marginTop: 20,\n  },\n  stretch: {\n    marginTop: 75,\n    width: 400,\n    height: 250,\n  }});\n",
    "static": true,
    "longname": "/Users/arivval/Documents/Courseworks/CS428/pedway4/pedway/pedwayApp/components/PDFMap/styles.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 202,
    "kind": "file",
    "name": "components/RenderAttractions/RenderAttractions.js",
    "content": "import React, {Component} from 'react';\nimport PedwayCoordinate from '../../model/PedwayCoordinate';\nimport PedwayAttraction from '../../model/PedwayAttraction';\nimport MapView from 'react-native-maps';\nimport {Text, View} from '../GroundMapView/GroundMapView';\n\n/**\n * Display all of the attractions located within the Pedway on the underground mapview\n * */\nexport default class RenderAttractions extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      pedwayAttractions: [],\n    };\n    this.parseJSONtoModel = this.parseJSONtoModel.bind(this);\n  }\n\n  /**\n   * Parse provided JSON file to get coordinates of all attractions.\n   * The filter step finds all JSON objects labeled as an 'attraction', which are of type 'point',\n   * and then the reduce step is used to create a new PedwayAttraction using the corresponding coordinates.\n   * */\n  parseJSONtoModel(inputJSON) {\n    const attractions = inputJSON['features'].filter((item) => {\n      try {\n        if (item['properties']['attraction'] === 'yes' &&\n                    item['geometry']['type'] === 'Point') {\n          return true;\n        }\n        return false;\n      } catch (e) {\n        return false;\n      }\n    }).reduce((acc, item) => {\n      const thisLongitude = item['geometry']['coordinates'][0];\n      const thisLatitude = item['geometry']['coordinates'][1];\n      return acc.concat(\n          new PedwayAttraction(new PedwayCoordinate(\n              thisLatitude,\n              thisLongitude),\n          item['id'],\n          item['properties']['hours']\n          ));\n    }, []);\n    this.setState({\n      pedwayAttractions: attractions,\n    });\n  }\n\n  componentWillMount() {\n    if (this.props.JSONData!==undefined) {\n      this.parseJSONtoModel(this.props.JSONData);\n    }\n  }\n\n  componentWillReceiveProps(next) {\n    if (next.JSONData!==undefined) {\n      this.parseJSONtoModel(next.JSONData);\n    }\n    this.forceUpdate();\n  }\n\n  /**\n   * Render all obtained attractions on the map with a green pin marker\n   * @returns {*[]}\n   */\n  render() {\n    const retMarkerList = this.state.pedwayAttractions.map((input, idx) => {\n      return (\n        <MapView.Marker\n          coordinate={input.getCoordinate().getJSON()}\n          key={idx}\n          pinColor='green'\n          onPress={()=>{\n            this.props.callbackFunc(this.state.pedwayAttractions[idx], false);\n          }}\n          title={input.getName()}\n          description={input.getHours()}\n        />\n      );\n    },\n    );\n    return (\n      retMarkerList\n    );\n  }\n}\n",
    "static": true,
    "longname": "/Users/arivval/Documents/Courseworks/CS428/pedway4/pedway/pedwayApp/components/RenderAttractions/RenderAttractions.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 203,
    "kind": "class",
    "name": "RenderAttractions",
    "memberof": "components/RenderAttractions/RenderAttractions.js",
    "static": true,
    "longname": "components/RenderAttractions/RenderAttractions.js~RenderAttractions",
    "access": "public",
    "export": true,
    "importPath": "ReactNativeTest/components/RenderAttractions/RenderAttractions.js",
    "importStyle": "RenderAttractions",
    "description": "Display all of the attractions located within the Pedway on the underground mapview",
    "lineNumber": 10,
    "interface": false,
    "extends": [
      "react~Component"
    ]
  },
  {
    "__docId__": 204,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "components/RenderAttractions/RenderAttractions.js~RenderAttractions",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "components/RenderAttractions/RenderAttractions.js~RenderAttractions#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 11,
    "undocument": true
  },
  {
    "__docId__": 205,
    "kind": "member",
    "name": "state",
    "memberof": "components/RenderAttractions/RenderAttractions.js~RenderAttractions",
    "static": false,
    "longname": "components/RenderAttractions/RenderAttractions.js~RenderAttractions#state",
    "access": "public",
    "description": null,
    "lineNumber": 13,
    "undocument": true,
    "type": {
      "types": [
        "{\"pedwayAttractions\": *}"
      ]
    }
  },
  {
    "__docId__": 207,
    "kind": "method",
    "name": "parseJSONtoModel",
    "memberof": "components/RenderAttractions/RenderAttractions.js~RenderAttractions",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "components/RenderAttractions/RenderAttractions.js~RenderAttractions#parseJSONtoModel",
    "access": "public",
    "description": "Parse provided JSON file to get coordinates of all attractions.\nThe filter step finds all JSON objects labeled as an 'attraction', which are of type 'point',\nand then the reduce step is used to create a new PedwayAttraction using the corresponding coordinates.",
    "lineNumber": 24,
    "params": [
      {
        "name": "inputJSON",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 208,
    "kind": "method",
    "name": "componentWillMount",
    "memberof": "components/RenderAttractions/RenderAttractions.js~RenderAttractions",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "components/RenderAttractions/RenderAttractions.js~RenderAttractions#componentWillMount",
    "access": "public",
    "description": null,
    "lineNumber": 51,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 209,
    "kind": "method",
    "name": "componentWillReceiveProps",
    "memberof": "components/RenderAttractions/RenderAttractions.js~RenderAttractions",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "components/RenderAttractions/RenderAttractions.js~RenderAttractions#componentWillReceiveProps",
    "access": "public",
    "description": null,
    "lineNumber": 57,
    "undocument": true,
    "params": [
      {
        "name": "next",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 210,
    "kind": "method",
    "name": "render",
    "memberof": "components/RenderAttractions/RenderAttractions.js~RenderAttractions",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "components/RenderAttractions/RenderAttractions.js~RenderAttractions#render",
    "access": "public",
    "description": "Render all obtained attractions on the map with a green pin marker",
    "lineNumber": 68,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{*[]}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "*[]"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 211,
    "kind": "file",
    "name": "components/RenderEntrance/RenderEntrance.js",
    "content": "import React, {Component} from 'react';\nimport {Image} from 'react-native';\nimport PedwayCoordinate from '../../model/PedwayCoordinate';\nimport PedwayEntrance from '../../model/PedwayEntrance';\nimport entrance from '../../media/entrances.png';\nimport MapView from 'react-native-maps';\n/**\n * The current pedway sections are hard coded place holders\n * In the future we are gonna to get those values from the API\n * */\nexport default class RenderEntrance extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      pedwayEntrances: [],\n    };\n    this.parseJSONtoModel = this.parseJSONtoModel.bind(this);\n  }\n\n  /**\n   * parses the representation of the pedway entrances fetched from the backend given in the inputJSON\n   * into a list of pedwayEntrances\n   * the coordinate and status will be set according to the inputJSON\n   * @param inputJSON\n   */\n  parseJSONtoModel(inputJSON) {\n    if (inputJSON === undefined || inputJSON['data'] === undefined) {\n      return;\n    }\n    const entrances = inputJSON['data'].reduce((acc, item, idx) => {\n      const thisLongitude = item['geometry']['coordinates'][0];\n      const thisLatitude = item['geometry']['coordinates'][1];\n      const thisStatus = item['status'];\n      return acc.concat(\n          new PedwayEntrance(new PedwayCoordinate(\n              thisLatitude,\n              thisLongitude), thisStatus,\n          false,\n          'Entrance #'+idx.toString()));\n    }, []);\n    this.setState({\n      pedwayEntrances: entrances,\n    });\n  }\n\n  componentWillMount() {\n    if (this.props.JSONData!==undefined) {\n      this.parseJSONtoModel(this.props.JSONData);\n    }\n  }\n\n  componentWillReceiveProps(next) {\n    if (next.JSONData!==undefined) {\n      this.parseJSONtoModel(next.JSONData);\n    }\n    this.forceUpdate();\n  }\n\n  /**\n   * renders the pedwayEntrance list parsed from the inputJSON into a list of markers on the map\n   * onclickListener is setup for the markers so that the user can click on a marker and bring up\n   * the corresponding slingupview\n   * @returns {*[]}\n   */\n  render() {\n    const retMarkerList = this.state.pedwayEntrances.map((input, idx) => {\n      return (\n        <MapView.Marker\n          coordinate={input.getCoordinate().getJSON()}\n          key={idx}\n          onPress={()=>{\n            this.props.callbackFunc(this.state.pedwayEntrances[idx], true);\n          }}\n          tracksViewChanges={false}\n        >\n          <Image source={entrance} style={{width: 30, height: 30}} />\n        </MapView.Marker>\n      );\n    },\n    );\n    return (\n      retMarkerList\n    );\n  }\n}\n",
    "static": true,
    "longname": "/Users/arivval/Documents/Courseworks/CS428/pedway4/pedway/pedwayApp/components/RenderEntrance/RenderEntrance.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 212,
    "kind": "class",
    "name": "RenderEntrance",
    "memberof": "components/RenderEntrance/RenderEntrance.js",
    "static": true,
    "longname": "components/RenderEntrance/RenderEntrance.js~RenderEntrance",
    "access": "public",
    "export": true,
    "importPath": "ReactNativeTest/components/RenderEntrance/RenderEntrance.js",
    "importStyle": "RenderEntrance",
    "description": "The current pedway sections are hard coded place holders\nIn the future we are gonna to get those values from the API",
    "lineNumber": 11,
    "interface": false,
    "extends": [
      "react~Component"
    ]
  },
  {
    "__docId__": 213,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "components/RenderEntrance/RenderEntrance.js~RenderEntrance",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "components/RenderEntrance/RenderEntrance.js~RenderEntrance#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 12,
    "undocument": true
  },
  {
    "__docId__": 214,
    "kind": "member",
    "name": "state",
    "memberof": "components/RenderEntrance/RenderEntrance.js~RenderEntrance",
    "static": false,
    "longname": "components/RenderEntrance/RenderEntrance.js~RenderEntrance#state",
    "access": "public",
    "description": null,
    "lineNumber": 14,
    "undocument": true,
    "type": {
      "types": [
        "{\"pedwayEntrances\": *}"
      ]
    }
  },
  {
    "__docId__": 216,
    "kind": "method",
    "name": "parseJSONtoModel",
    "memberof": "components/RenderEntrance/RenderEntrance.js~RenderEntrance",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "components/RenderEntrance/RenderEntrance.js~RenderEntrance#parseJSONtoModel",
    "access": "public",
    "description": "parses the representation of the pedway entrances fetched from the backend given in the inputJSON\ninto a list of pedwayEntrances\nthe coordinate and status will be set according to the inputJSON",
    "lineNumber": 26,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "inputJSON",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 217,
    "kind": "method",
    "name": "componentWillMount",
    "memberof": "components/RenderEntrance/RenderEntrance.js~RenderEntrance",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "components/RenderEntrance/RenderEntrance.js~RenderEntrance#componentWillMount",
    "access": "public",
    "description": null,
    "lineNumber": 46,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 218,
    "kind": "method",
    "name": "componentWillReceiveProps",
    "memberof": "components/RenderEntrance/RenderEntrance.js~RenderEntrance",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "components/RenderEntrance/RenderEntrance.js~RenderEntrance#componentWillReceiveProps",
    "access": "public",
    "description": null,
    "lineNumber": 52,
    "undocument": true,
    "params": [
      {
        "name": "next",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 219,
    "kind": "method",
    "name": "render",
    "memberof": "components/RenderEntrance/RenderEntrance.js~RenderEntrance",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "components/RenderEntrance/RenderEntrance.js~RenderEntrance#render",
    "access": "public",
    "description": "renders the pedwayEntrance list parsed from the inputJSON into a list of markers on the map\nonclickListener is setup for the markers so that the user can click on a marker and bring up\nthe corresponding slingupview",
    "lineNumber": 65,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{*[]}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "*[]"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 220,
    "kind": "file",
    "name": "components/RenderEntrance/styles.js",
    "content": "",
    "static": true,
    "longname": "/Users/arivval/Documents/Courseworks/CS428/pedway4/pedway/pedwayApp/components/RenderEntrance/styles.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 221,
    "kind": "file",
    "name": "components/RenderLocation/RenderLocation.js",
    "content": "import React, {Component} from 'react';\nimport PedwayCoordinate from '../../model/PedwayCoordinate';\nimport PedwayEntrance from '../../model/PedwayEntrance';\nimport MapView from 'react-native-maps';\n\n/**\n * The current pedway sections are hard coded place holders\n * In the future we are gonna to get those values from the API\n * */\nexport default class RenderLocation extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      pedwayLocations: [],\n    };\n    this.parseJSONtoModel = this.parseJSONtoModel.bind(this);\n  }\n\n  /**\n   * parses the representation of a list of locations fetched from the point of interest api\n   * into a list of locations\n   * the coordinate and status will be set according to the inputJSON\n   * @param inputJSON\n   */\n  parseJSONtoModel(inputJSON) {\n    const locations = inputJSON.filter((item) => {\n      try {\n        if (item['geometry']['type'] === 'Point') {\n          return true;\n        }\n        return false;\n      } catch (e) {\n        return false;\n      }\n    }).reduce((acc, item) => {\n      const thisLongitude = item['geometry']['coordinates'][0];\n      const thisLatitude = item['geometry']['coordinates'][1];\n      const thisName = item['properties']['name'];\n      return acc.concat(\n          new PedwayEntrance(new PedwayCoordinate(\n              thisLatitude,\n              thisLongitude),\n          true,\n          false,\n          thisName));\n    }, []);\n    this.setState({\n      pedwayLocations: locations,\n    });\n  }\n\n  componentWillMount() {\n    if (this.props.JSONData!==undefined) {\n      this.parseJSONtoModel(this.props.JSONData);\n    }\n  }\n\n  componentWillReceiveProps(next) {\n    if (next.JSONData!==undefined) {\n      this.parseJSONtoModel(next.JSONData);\n    }\n    this.forceUpdate();\n  }\n\n  /**\n   * renders the location list parsed from the inputJSON into a list of markers on the map\n   * onclickListener is setup for the markers so that the user can click on a marker and bring up\n   * the corresponding slingupview\n   * @returns {*[]}\n   */\n  render() {\n    const retMarkerList = this.state.pedwayLocations.map((input, idx) => {\n      return (\n        <MapView.Marker\n          coordinate={input.getCoordinate().getJSON()}\n          key={idx}\n          onPress={()=>{\n            this.props.callbackFunc(this.state.pedwayLocations[idx], false);\n          }}\n        />\n      );\n    },\n    );\n    return (\n      retMarkerList\n    );\n  }\n}\n",
    "static": true,
    "longname": "/Users/arivval/Documents/Courseworks/CS428/pedway4/pedway/pedwayApp/components/RenderLocation/RenderLocation.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 222,
    "kind": "class",
    "name": "RenderLocation",
    "memberof": "components/RenderLocation/RenderLocation.js",
    "static": true,
    "longname": "components/RenderLocation/RenderLocation.js~RenderLocation",
    "access": "public",
    "export": true,
    "importPath": "ReactNativeTest/components/RenderLocation/RenderLocation.js",
    "importStyle": "RenderLocation",
    "description": "The current pedway sections are hard coded place holders\nIn the future we are gonna to get those values from the API",
    "lineNumber": 10,
    "interface": false,
    "extends": [
      "react~Component"
    ]
  },
  {
    "__docId__": 223,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "components/RenderLocation/RenderLocation.js~RenderLocation",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "components/RenderLocation/RenderLocation.js~RenderLocation#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 11,
    "undocument": true
  },
  {
    "__docId__": 224,
    "kind": "member",
    "name": "state",
    "memberof": "components/RenderLocation/RenderLocation.js~RenderLocation",
    "static": false,
    "longname": "components/RenderLocation/RenderLocation.js~RenderLocation#state",
    "access": "public",
    "description": null,
    "lineNumber": 13,
    "undocument": true,
    "type": {
      "types": [
        "{\"pedwayLocations\": *}"
      ]
    }
  },
  {
    "__docId__": 226,
    "kind": "method",
    "name": "parseJSONtoModel",
    "memberof": "components/RenderLocation/RenderLocation.js~RenderLocation",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "components/RenderLocation/RenderLocation.js~RenderLocation#parseJSONtoModel",
    "access": "public",
    "description": "parses the representation of a list of locations fetched from the point of interest api\ninto a list of locations\nthe coordinate and status will be set according to the inputJSON",
    "lineNumber": 25,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "inputJSON",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 227,
    "kind": "method",
    "name": "componentWillMount",
    "memberof": "components/RenderLocation/RenderLocation.js~RenderLocation",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "components/RenderLocation/RenderLocation.js~RenderLocation#componentWillMount",
    "access": "public",
    "description": null,
    "lineNumber": 52,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 228,
    "kind": "method",
    "name": "componentWillReceiveProps",
    "memberof": "components/RenderLocation/RenderLocation.js~RenderLocation",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "components/RenderLocation/RenderLocation.js~RenderLocation#componentWillReceiveProps",
    "access": "public",
    "description": null,
    "lineNumber": 58,
    "undocument": true,
    "params": [
      {
        "name": "next",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 229,
    "kind": "method",
    "name": "render",
    "memberof": "components/RenderLocation/RenderLocation.js~RenderLocation",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "components/RenderLocation/RenderLocation.js~RenderLocation#render",
    "access": "public",
    "description": "renders the location list parsed from the inputJSON into a list of markers on the map\nonclickListener is setup for the markers so that the user can click on a marker and bring up\nthe corresponding slingupview",
    "lineNumber": 71,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{*[]}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "*[]"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 230,
    "kind": "file",
    "name": "components/RenderLocation/styles.js",
    "content": "",
    "static": true,
    "longname": "/Users/arivval/Documents/Courseworks/CS428/pedway4/pedway/pedwayApp/components/RenderLocation/styles.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 231,
    "kind": "file",
    "name": "components/RenderPedway/RenderPedway.js",
    "content": "import React, {Component} from 'react';\nimport PedwaySection from '../../model/PedwaySection';\nimport PedwayCoordinate from '../../model/PedwayCoordinate';\nimport MapView from 'react-native-maps';\n\n/**\n * Parse the GeoJSON representation of list of lineString and multiLineStrings into a list of polyline\n * that we can display on the map\n * */\nexport default class RenderPedway extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      pedwaySections: [],\n      strokeColor: '#FFEF8C',\n      strokeWidth: 8,\n      zIndex: 1,\n\n    };\n    this.parseJSONtoModel = this.parseJSONtoModel.bind(this);\n    this.parseLineJSON = this.parseLineJSON.bind(this);\n    this.parseMultiLineJSON = this.parseMultiLineJSON.bind(this);\n  }\n\n  /**\n   * parse lineString in GeoJSON format into a pedway section\n   * @param inputJSON The lineString we got\n   * @returns {*}\n   */\n  parseLineJSON(inputJSON) {\n    try {\n      const retVal = [];\n      inputJSON['geometry']['coordinates'].forEach((item) => {\n        retVal.push(new PedwayCoordinate(item[1], item[0]));\n      });\n      return new PedwaySection(retVal);\n    } catch (e) {\n      return null;\n    }\n  }\n\n  /**\n   * parse multiLineString in GeoJSON format in to a list of pedway sections\n   * @param inputJSON The multiLineString we got\n   * @returns {*}\n   */\n  parseMultiLineJSON(inputJSON) {\n    try {\n      const retVal = [];\n      inputJSON['geometry']['coordinates'].forEach((itemList) => {\n        const thisList = [];\n        itemList.forEach((item) => {\n          thisList.push(new PedwayCoordinate(item[1], item[0]));\n        });\n        retVal.push(new PedwaySection(thisList));\n      });\n      return retVal;\n    } catch (e) {\n      return null;\n    }\n  }\n\n  /**\n   * parse a list of lineString and multiLineString into a list of path (a list of pedway sections)\n   * @param inputJSON\n   */\n  parseJSONtoModel(inputJSON) {\n    const paths = inputJSON['features'].filter((item) => {\n      try {\n        if (item['geometry']['type'] === 'LineString' ||\n          item['geometry']['type'] === 'Polygon' ||\n          item['geometry']['type'] === 'MultiLineString') {\n          return true;\n        }\n        return false;\n      } catch (e) {\n        return false;\n      }\n    }).reduce((acc, item) => {\n      if (item['geometry']['type'] === 'LineString') {\n        const thisSection = this.parseLineJSON(item);\n        return (thisSection !== null) ? (acc.concat(thisSection)) : (acc);\n      } else if (item['geometry']['type'] === 'Polygon' ||\n        item['geometry']['type'] === 'MultiLineString') {\n        const thisSection = this.parseMultiLineJSON(item);\n        return (thisSection !== null) ? (acc.concat(thisSection)) : (acc);\n      } else {\n        return acc;\n      }\n    }, []);\n    this.setState({\n      pedwaySections: paths,\n    });\n  }\n\n  componentWillMount() {\n    if (this.props.JSONData!==undefined) {\n      this.parseJSONtoModel(this.props.JSONData);\n    }\n    if (this.props.strokeWidth!==undefined) {\n      this.setState({\n        strokeWidth: this.props.strokeWidth,\n      });\n    }\n    if (this.props.strokeColor!==undefined) {\n      this.setState({\n        strokeColor: this.props.strokeColor,\n      });\n    }\n    if (this.props.zIndex!==undefined) {\n      this.setState({\n        zIndex: this.props.zIndex,\n      });\n    }\n  }\n\n  componentWillReceiveProps(next) {\n    if (this.props.JSONData!==undefined) {\n      this.parseJSONtoModel(next.JSONData);\n    }\n  }\n\n  /**\n   * use the list of path we got from, display a list of Polyline on the map representing the pedway\n   * @returns {*[]}\n   */\n  render() {\n    return (\n      this.state.pedwaySections.map((path, idx) => {\n        return (\n          <MapView.Polyline\n            key={idx}\n            coordinates={path.getJSONList()}\n            strokeColor={this.state.strokeColor}\n            strokeWidth={this.state.strokeWidth}\n            style={{zIndex: this.state.zIndex}}\n          />\n        );\n      })\n    );\n  }\n}\n",
    "static": true,
    "longname": "/Users/arivval/Documents/Courseworks/CS428/pedway4/pedway/pedwayApp/components/RenderPedway/RenderPedway.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 232,
    "kind": "class",
    "name": "RenderPedway",
    "memberof": "components/RenderPedway/RenderPedway.js",
    "static": true,
    "longname": "components/RenderPedway/RenderPedway.js~RenderPedway",
    "access": "public",
    "export": true,
    "importPath": "ReactNativeTest/components/RenderPedway/RenderPedway.js",
    "importStyle": "RenderPedway",
    "description": "Parse the GeoJSON representation of list of lineString and multiLineStrings into a list of polyline\nthat we can display on the map",
    "lineNumber": 10,
    "interface": false,
    "extends": [
      "react~Component"
    ]
  },
  {
    "__docId__": 233,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "components/RenderPedway/RenderPedway.js~RenderPedway",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "components/RenderPedway/RenderPedway.js~RenderPedway#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 11,
    "undocument": true
  },
  {
    "__docId__": 234,
    "kind": "member",
    "name": "state",
    "memberof": "components/RenderPedway/RenderPedway.js~RenderPedway",
    "static": false,
    "longname": "components/RenderPedway/RenderPedway.js~RenderPedway#state",
    "access": "public",
    "description": null,
    "lineNumber": 13,
    "undocument": true,
    "type": {
      "types": [
        "{\"pedwaySections\": *, \"strokeColor\": string, \"strokeWidth\": number, \"zIndex\": number}"
      ]
    }
  },
  {
    "__docId__": 238,
    "kind": "method",
    "name": "parseLineJSON",
    "memberof": "components/RenderPedway/RenderPedway.js~RenderPedway",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "components/RenderPedway/RenderPedway.js~RenderPedway#parseLineJSON",
    "access": "public",
    "description": "parse lineString in GeoJSON format into a pedway section",
    "lineNumber": 30,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{*}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "inputJSON",
        "description": "The lineString we got"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 239,
    "kind": "method",
    "name": "parseMultiLineJSON",
    "memberof": "components/RenderPedway/RenderPedway.js~RenderPedway",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "components/RenderPedway/RenderPedway.js~RenderPedway#parseMultiLineJSON",
    "access": "public",
    "description": "parse multiLineString in GeoJSON format in to a list of pedway sections",
    "lineNumber": 47,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{*}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "inputJSON",
        "description": "The multiLineString we got"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 240,
    "kind": "method",
    "name": "parseJSONtoModel",
    "memberof": "components/RenderPedway/RenderPedway.js~RenderPedway",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "components/RenderPedway/RenderPedway.js~RenderPedway#parseJSONtoModel",
    "access": "public",
    "description": "parse a list of lineString and multiLineString into a list of path (a list of pedway sections)",
    "lineNumber": 67,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "inputJSON",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 241,
    "kind": "method",
    "name": "componentWillMount",
    "memberof": "components/RenderPedway/RenderPedway.js~RenderPedway",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "components/RenderPedway/RenderPedway.js~RenderPedway#componentWillMount",
    "access": "public",
    "description": null,
    "lineNumber": 96,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 242,
    "kind": "method",
    "name": "componentWillReceiveProps",
    "memberof": "components/RenderPedway/RenderPedway.js~RenderPedway",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "components/RenderPedway/RenderPedway.js~RenderPedway#componentWillReceiveProps",
    "access": "public",
    "description": null,
    "lineNumber": 117,
    "undocument": true,
    "params": [
      {
        "name": "next",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 243,
    "kind": "method",
    "name": "render",
    "memberof": "components/RenderPedway/RenderPedway.js~RenderPedway",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "components/RenderPedway/RenderPedway.js~RenderPedway#render",
    "access": "public",
    "description": "use the list of path we got from, display a list of Polyline on the map representing the pedway",
    "lineNumber": 127,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{*[]}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "*[]"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 244,
    "kind": "file",
    "name": "components/RenderPedway/styles.js",
    "content": "",
    "static": true,
    "longname": "/Users/arivval/Documents/Courseworks/CS428/pedway4/pedway/pedwayApp/components/RenderPedway/styles.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 245,
    "kind": "file",
    "name": "components/RoundButton/RoundButton.js",
    "content": "import React, {Component} from 'react';\nimport styles from './styles';\nimport {TouchableOpacity, View} from 'react-native';\nimport Icon from 'react-native-vector-icons/FontAwesome';\n\n/**\n * renders an round button with an onClicklistener and icon, icon and size can be customized by passing in props\n */\nexport default class RoundButton extends React.Component {\n  render() {\n    return (\n      <TouchableOpacity\n        style={[this.props.style, styles.floating, styles.roundButton]}\n        onPress={this.props.func}>\n        <View style={{\n          flexGrow: 1,\n          justifyContent: 'center',\n          alignItems: 'center',\n        }}>\n          <Icon\n            name={this.props.icon}\n            size={this.props.size===undefined?20:this.props.size}\n            color=\"#555\"\n          />\n        </View>\n      </TouchableOpacity>\n    );\n  }\n}\n\n",
    "static": true,
    "longname": "/Users/arivval/Documents/Courseworks/CS428/pedway4/pedway/pedwayApp/components/RoundButton/RoundButton.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 246,
    "kind": "class",
    "name": "RoundButton",
    "memberof": "components/RoundButton/RoundButton.js",
    "static": true,
    "longname": "components/RoundButton/RoundButton.js~RoundButton",
    "access": "public",
    "export": true,
    "importPath": "ReactNativeTest/components/RoundButton/RoundButton.js",
    "importStyle": "RoundButton",
    "description": "renders an round button with an onClicklistener and icon, icon and size can be customized by passing in props",
    "lineNumber": 9,
    "interface": false,
    "extends": [
      "react~React.Component"
    ]
  },
  {
    "__docId__": 247,
    "kind": "method",
    "name": "render",
    "memberof": "components/RoundButton/RoundButton.js~RoundButton",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "components/RoundButton/RoundButton.js~RoundButton#render",
    "access": "public",
    "description": null,
    "lineNumber": 10,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 248,
    "kind": "file",
    "name": "components/RoundButton/styles.js",
    "content": "import {StyleSheet} from 'react-native';\n\n\nconst styles = StyleSheet.create({\n  roundButton: {\n    zIndex: 1,\n    backgroundColor: '#FFFFFF',\n    borderRadius: 60,\n  },\n  floating: {\n    shadowOffset: {width: 30, height: 30},\n    shadowColor: 'rgba(0, 0, 0, 0.6)',\n    shadowOpacity: 0.8,\n    elevation: 6,\n    shadowRadius: 15,\n    alignItems: 'center',\n    textAlignVertical: 'center',\n    opacity: 0.95,\n  },\n});\n\nexport default styles;\n",
    "static": true,
    "longname": "/Users/arivval/Documents/Courseworks/CS428/pedway4/pedway/pedwayApp/components/RoundButton/styles.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 249,
    "kind": "variable",
    "name": "styles",
    "memberof": "components/RoundButton/styles.js",
    "static": true,
    "longname": "components/RoundButton/styles.js~styles",
    "access": "public",
    "export": true,
    "importPath": "ReactNativeTest/components/RoundButton/styles.js",
    "importStyle": "styles",
    "description": null,
    "lineNumber": 4,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 250,
    "kind": "file",
    "name": "components/SearchBar/SearchBar.js",
    "content": "import styles from './styles';\nimport {\n  Text,\n  TextInput,\n  TouchableOpacity,\n  View,\n  ActivityIndicator,\n} from 'react-native';\nimport React, {Component} from 'react';\nimport axios from 'axios';\n\nconst AZURE_API = 'https://pedway.azurewebsites.net';\n\n/**\n * renders a search bar that allow user to search location within the Chicago city via the auto completion poi endpoint\n * in our backend\n */\nexport default class SearchBar extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      queryText: '',\n      showTextInput: false,\n      searching: false,\n    };\n\n    this.searchBarOnSubmit = this.searchBarOnSubmit.bind(this);\n    this.searchBarEdit = this.searchBarEdit.bind(this);\n  }\n\n  /**\n   * onSubmit callback, request the autocomplete endpoint with the query string user has entered\n   * the endpoint return a list of features that represents all the search results\n   */\n  searchBarOnSubmit() {\n    this.setState({\n      showTextInput: false,\n    });\n    if (this.state.queryText==='') {\n      this.props.updateSearchData([]);\n    } else {\n      this.setState({\n        searching: true,\n      });\n\n      axios.get(AZURE_API +\n          '/api/ors/geocode/autocomplete' +\n          '?text=' +\n          this.state.queryText +\n          '&boundary.rect.min_lat=41.765683' +\n          '&boundary.rect.max_lat=41.909595' +\n          '&boundary.rect.min_lon=-87.746445' +\n          '&boundary.rect.max_lon=-87.565921').then((res) => {\n        this.setState({\n          searching: false,\n        });\n        this.props.updateSearchData(res['data']['features']);\n        // now we can forward this result to our main map view\n      }).catch(()=>{\n        this.props.networkErrorHandler();\n        this.setState({searching: false});\n      });\n    }\n  }\n\n  /**\n   * onEdit listener for the textField, update the queryText state\n   * @param textInput\n   */\n  searchBarEdit(textInput) {\n    this.setState({\n      showTextInput: true,\n      queryText: textInput,\n    });\n  }\n\n  render() {\n    if (this.state.searching) {\n      return (\n        <TouchableOpacity\n          style={[styles.floating, styles.searchBox]}\n          onPress={this.searchBarOnClick}\n        >\n          <View style={{\n            flexDirection: 'row',\n          }}>\n            <TextInput\n              numberOfLines={1}\n              style={styles.textInput}\n              placeholder = 'Enter your destination...'\n              onSubmitEditing={this.searchBarOnSubmit}\n              onChangeText={this.searchBarEdit}\n            >\n            </TextInput>\n            <ActivityIndicator\n              size='small'\n              color='#333'\n              animating={true}\n              style={{marginRight: 20}}\n            />\n          </View>\n        </TouchableOpacity>\n      );\n    } else {\n      return (\n        <TouchableOpacity\n          style={[styles.floating, styles.searchBox]}\n          onPress={this.searchBarOnClick}\n        >\n          <View style={{\n            flexDirection: 'row',\n          }}>\n            <TextInput\n              numberOfLines={1}\n              style={styles.textInput}\n              placeholder = 'Enter your destination...'\n              onSubmitEditing={this.searchBarOnSubmit}\n              onChangeText={this.searchBarEdit}\n            >\n            </TextInput>\n          </View>\n        </TouchableOpacity>\n      );\n    }\n  }\n}\n\n",
    "static": true,
    "longname": "/Users/arivval/Documents/Courseworks/CS428/pedway4/pedway/pedwayApp/components/SearchBar/SearchBar.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 251,
    "kind": "variable",
    "name": "AZURE_API",
    "memberof": "components/SearchBar/SearchBar.js",
    "static": true,
    "longname": "components/SearchBar/SearchBar.js~AZURE_API",
    "access": "public",
    "export": false,
    "importPath": "ReactNativeTest/components/SearchBar/SearchBar.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 12,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 252,
    "kind": "class",
    "name": "SearchBar",
    "memberof": "components/SearchBar/SearchBar.js",
    "static": true,
    "longname": "components/SearchBar/SearchBar.js~SearchBar",
    "access": "public",
    "export": true,
    "importPath": "ReactNativeTest/components/SearchBar/SearchBar.js",
    "importStyle": "SearchBar",
    "description": "renders a search bar that allow user to search location within the Chicago city via the auto completion poi endpoint\nin our backend",
    "lineNumber": 18,
    "interface": false,
    "extends": [
      "react~React.Component"
    ]
  },
  {
    "__docId__": 253,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "components/SearchBar/SearchBar.js~SearchBar",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "components/SearchBar/SearchBar.js~SearchBar#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 19,
    "undocument": true
  },
  {
    "__docId__": 254,
    "kind": "member",
    "name": "state",
    "memberof": "components/SearchBar/SearchBar.js~SearchBar",
    "static": false,
    "longname": "components/SearchBar/SearchBar.js~SearchBar#state",
    "access": "public",
    "description": null,
    "lineNumber": 22,
    "undocument": true,
    "type": {
      "types": [
        "{\"queryText\": *, \"showTextInput\": *, \"searching\": *}"
      ]
    }
  },
  {
    "__docId__": 257,
    "kind": "method",
    "name": "searchBarOnSubmit",
    "memberof": "components/SearchBar/SearchBar.js~SearchBar",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "components/SearchBar/SearchBar.js~SearchBar#searchBarOnSubmit",
    "access": "public",
    "description": "onSubmit callback, request the autocomplete endpoint with the query string user has entered\nthe endpoint return a list of features that represents all the search results",
    "lineNumber": 36,
    "params": [],
    "return": null
  },
  {
    "__docId__": 258,
    "kind": "method",
    "name": "searchBarEdit",
    "memberof": "components/SearchBar/SearchBar.js~SearchBar",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "components/SearchBar/SearchBar.js~SearchBar#searchBarEdit",
    "access": "public",
    "description": "onEdit listener for the textField, update the queryText state",
    "lineNumber": 71,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "textInput",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 259,
    "kind": "method",
    "name": "render",
    "memberof": "components/SearchBar/SearchBar.js~SearchBar",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "components/SearchBar/SearchBar.js~SearchBar#render",
    "access": "public",
    "description": null,
    "lineNumber": 78,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 260,
    "kind": "file",
    "name": "components/SearchBar/styles.js",
    "content": "import {StyleSheet} from 'react-native';\n\nexport default StyleSheet.create({\n  searchBox: {\n    position: 'absolute',\n    top: 25,\n    height: 50,\n    width: 380,\n    backgroundColor: '#FFFFFF',\n    color: '#CCCCCC',\n    textAlignVertical: 'center',\n    marginLeft: 20,\n    borderRadius: 10,\n    zIndex: -1,\n  },\n  floating: {\n    shadowOffset: {width: 30, height: 30},\n    shadowColor: 'rgba(0, 0, 0, 0.6)',\n    shadowOpacity: 0.8,\n    elevation: 6,\n    shadowRadius: 15,\n    alignItems: 'center',\n    textAlignVertical: 'center',\n    opacity: 0.95,\n  },\n  textInput: {\n    flex: 1,\n    fontSize: 18,\n    marginLeft: 80,\n    textAlign: 'left',\n    paddingTop: 12,\n    marginRight: 20,\n  },\n});\n",
    "static": true,
    "longname": "/Users/arivval/Documents/Courseworks/CS428/pedway4/pedway/pedwayApp/components/SearchBar/styles.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 261,
    "kind": "file",
    "name": "components/SlidingUpDetailView/SlidingUpDetailView.js",
    "content": "import React, {Component} from 'react';\nimport {Platform, StyleSheet, Text, View, TouchableOpacity} from 'react-native';\nimport styles from './styles';\nimport SlidingUpPanel from 'rn-sliding-up-panel';\nimport Icon from 'react-native-vector-icons/MaterialIcons';\n\n\n/**\n * renders a view Component that displays pedway info and user action when\n * mapMarker is clicked\n * Allow user to view the name and coordinate of the spot, display a button for user to navigate to\n * if this marker is a pedway entrance, we also need to show the open/close status and also display a feedback button\n * if this marker is a pedway entrance, a navigation buttonis also displayed. If navigation is false this button\n * will be start navigation button. Vice versa this button will be end navigation button.\n */\n\nexport default class SlidingUpDetailView extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      open: false,\n      entrance: null,\n      navigateFunctor: null,\n      navigate: false,\n      isEntrance: true,\n    };\n    this.updateState = this.updateState.bind(this);\n    this.openView = this.openView.bind(this);\n    this.closeView = this.closeView.bind(this);\n    this.navigateButtonOnPress = this.navigateButtonOnPress.bind(this);\n    this.setNavigate = this.setNavigate.bind(this);\n    this.feedbackButtonOnPress = this.feedbackButtonOnPress.bind(this);\n    this.setIsOpen = this.setIsOpen.bind(this);\n  }\n\n  /**\n   * set the open/close status of this sliding up view\n   * @param status\n   */\n  setIsOpen(status) {\n    this.setState({\n      open: status,\n    });\n    if (status) {\n      this.openView();\n    } else {\n      this.closeView();\n    }\n  }\n\n  /**\n   * update what entrance/attraction shown in this view from the object we got from the inputProps\n   * @param inputProps\n   */\n  updateState(inputProps) {\n    if (inputProps.entrance !== undefined && inputProps.entrance !== null) {\n      this.setState({\n        entrance: inputProps.entrance,\n        isEntrance: inputProps.isEntrance,\n      });\n    }\n  }\n\n  openView() {\n    this.detailView.show();\n  }\n\n  closeView() {\n    this.detailView.hide();\n  }\n\n  componentDidMount() {\n    this.updateState(this.props);\n  }\n\n  componentWillReceiveProps(nextProps) {\n    this.updateState(nextProps);\n  }\n\n  /**\n   * communicate with app component when start/cancel navigation button is pressed\n   */\n  navigateButtonOnPress() {\n    this.props.startNavigate(this.state.entrance, !this.state.navigate);\n    this.setState({\n      navigate: !this.state.navigate,\n    });\n  }\n\n  /**\n   * onPress listener for the feedback button\n   */\n  feedbackButtonOnPress() {\n    // remove Entrance # string\n    let entranceIndexString = this.state.entrance.getName().slice(10);\n    try {\n      let entranceIndex = parseInt(entranceIndexString);\n      this.props.displayFeedbackWindow(entranceIndex);\n    } catch (e) {\n    }\n  }\n\n  /**\n   * set this.state.navigation\n   * if state === false, also close the sliding up view\n   * @param state\n   */\n  setNavigate(state) {\n    this.setState({\n      navigate: state,\n      open: state,\n\n    });\n    if (!state) {\n      this.closeView();\n    }\n  }\n\n  render() {\n    if (this.state.entrance !== undefined && this.state.entrance !== null) {\n      return (\n        <SlidingUpPanel\n          draggableRange={{top: 150, bottom: 0}}\n          showBackdrop={false}\n          ref={(thisView) => {\n            this.detailView = thisView;\n          }}\n        >\n          <View style={styles.aboveFlexContainer}>\n            <Text\n              style={styles.entranceLabel}\n              numberOfLines={1}\n            >\n              {this.state.entrance.getName()}\n            </Text>\n            <View style={styles.routeButtonContainer}>\n              <TouchableOpacity\n                style={styles.routeBackgroundContainer}\n                onPress={() => {\n                  this.navigateButtonOnPress();\n                }}\n              >\n                <Icon\n                  style={styles.routeButton}\n                  name={this.state.navigate?'rotate-left':'directions-walk'}\n                />\n              </TouchableOpacity>\n            </View>\n          </View>\n          <View style={styles.backgroundView}>\n            <View style={styles.belowFlexContainer}>\n              <View style={styles.belowFlex}>\n                {!this.state.isEntrance?\n                null:\n                <StatusLabel\n                  text={this.state.entrance.getStatus()}/>\n                }\n                <Text style={styles.coordinateText}>\n                  {this.state.entrance.getCoordinate().getLatitude() + ', '\n                  + this.state.entrance.getCoordinate().getLongitude()}\n                </Text>\n                {\n                  this.state.isEntrance?\n                    <View style={styles.routeButtonContainer}>\n                      <TouchableOpacity\n                        style={styles.feedbackBackgroundContainer}\n                        onPress={() => {\n                          this.feedbackButtonOnPress();\n                        }}\n                      >\n                        <Icon\n                          style={styles.feedbackButton}\n                          name={'error-outline'}\n                        />\n                      </TouchableOpacity>\n                    </View>:\n                    null\n                }\n              </View>\n            </View>\n          </View>\n        </SlidingUpPanel>\n      );\n    } else {\n      return (\n        <SlidingUpPanel\n          draggableRange={{top: 150, bottom: 0}}\n          showBackdrop={false}\n          ref={(thisView) => {\n            this.detailView = thisView;\n          }}/>\n      );\n    }\n  }\n}\n\n\n/**\n * separate component for the status label displaying the current status of the pedway entrance\n * if the status of the pedway is not requested yet, we need to render a blank rounded rectangle for placeholder\n */\nclass StatusLabel extends Component {\n  render() {\n    if (this.props.text === 'open') {\n      return (\n        <View style={[styles.statusLabelContainer, styles.statusLabelGreen]}>\n          <Text style={styles.statusLabelText}>\n            Open\n          </Text>\n        </View>\n      );\n    } else if (this.props.text === 'closed') {\n      return (\n        <View style={[styles.statusLabelContainer, styles.statusLabelRed]}>\n          <Text style={styles.statusLabelText}>\n            Closed\n          </Text>\n        </View>\n      );\n    } else {\n      return (\n        <View style={[styles.statusLabelContainer, styles.statusLabelGrey]}>\n          <Text style={styles.statusLabelText}>\n            &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\n          </Text>\n        </View>\n      );\n    }\n  }\n}\n",
    "static": true,
    "longname": "/Users/arivval/Documents/Courseworks/CS428/pedway4/pedway/pedwayApp/components/SlidingUpDetailView/SlidingUpDetailView.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 262,
    "kind": "class",
    "name": "SlidingUpDetailView",
    "memberof": "components/SlidingUpDetailView/SlidingUpDetailView.js",
    "static": true,
    "longname": "components/SlidingUpDetailView/SlidingUpDetailView.js~SlidingUpDetailView",
    "access": "public",
    "export": true,
    "importPath": "ReactNativeTest/components/SlidingUpDetailView/SlidingUpDetailView.js",
    "importStyle": "SlidingUpDetailView",
    "description": "renders a view Component that displays pedway info and user action when\nmapMarker is clicked\nAllow user to view the name and coordinate of the spot, display a button for user to navigate to\nif this marker is a pedway entrance, we also need to show the open/close status and also display a feedback button\nif this marker is a pedway entrance, a navigation buttonis also displayed. If navigation is false this button\nwill be start navigation button. Vice versa this button will be end navigation button.",
    "lineNumber": 17,
    "interface": false,
    "extends": [
      "react~Component"
    ]
  },
  {
    "__docId__": 263,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "components/SlidingUpDetailView/SlidingUpDetailView.js~SlidingUpDetailView",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "components/SlidingUpDetailView/SlidingUpDetailView.js~SlidingUpDetailView#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 18,
    "undocument": true
  },
  {
    "__docId__": 264,
    "kind": "member",
    "name": "state",
    "memberof": "components/SlidingUpDetailView/SlidingUpDetailView.js~SlidingUpDetailView",
    "static": false,
    "longname": "components/SlidingUpDetailView/SlidingUpDetailView.js~SlidingUpDetailView#state",
    "access": "public",
    "description": null,
    "lineNumber": 20,
    "undocument": true,
    "type": {
      "types": [
        "{\"open\": *, \"entrance\": *, \"navigateFunctor\": *, \"navigate\": *, \"isEntrance\": boolean}"
      ]
    }
  },
  {
    "__docId__": 272,
    "kind": "method",
    "name": "setIsOpen",
    "memberof": "components/SlidingUpDetailView/SlidingUpDetailView.js~SlidingUpDetailView",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "components/SlidingUpDetailView/SlidingUpDetailView.js~SlidingUpDetailView#setIsOpen",
    "access": "public",
    "description": "set the open/close status of this sliding up view",
    "lineNumber": 40,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "status",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 273,
    "kind": "method",
    "name": "updateState",
    "memberof": "components/SlidingUpDetailView/SlidingUpDetailView.js~SlidingUpDetailView",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "components/SlidingUpDetailView/SlidingUpDetailView.js~SlidingUpDetailView#updateState",
    "access": "public",
    "description": "update what entrance/attraction shown in this view from the object we got from the inputProps",
    "lineNumber": 55,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "inputProps",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 274,
    "kind": "method",
    "name": "openView",
    "memberof": "components/SlidingUpDetailView/SlidingUpDetailView.js~SlidingUpDetailView",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "components/SlidingUpDetailView/SlidingUpDetailView.js~SlidingUpDetailView#openView",
    "access": "public",
    "description": null,
    "lineNumber": 64,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 275,
    "kind": "method",
    "name": "closeView",
    "memberof": "components/SlidingUpDetailView/SlidingUpDetailView.js~SlidingUpDetailView",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "components/SlidingUpDetailView/SlidingUpDetailView.js~SlidingUpDetailView#closeView",
    "access": "public",
    "description": null,
    "lineNumber": 68,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 276,
    "kind": "method",
    "name": "componentDidMount",
    "memberof": "components/SlidingUpDetailView/SlidingUpDetailView.js~SlidingUpDetailView",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "components/SlidingUpDetailView/SlidingUpDetailView.js~SlidingUpDetailView#componentDidMount",
    "access": "public",
    "description": null,
    "lineNumber": 72,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 277,
    "kind": "method",
    "name": "componentWillReceiveProps",
    "memberof": "components/SlidingUpDetailView/SlidingUpDetailView.js~SlidingUpDetailView",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "components/SlidingUpDetailView/SlidingUpDetailView.js~SlidingUpDetailView#componentWillReceiveProps",
    "access": "public",
    "description": null,
    "lineNumber": 76,
    "undocument": true,
    "params": [
      {
        "name": "nextProps",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 278,
    "kind": "method",
    "name": "navigateButtonOnPress",
    "memberof": "components/SlidingUpDetailView/SlidingUpDetailView.js~SlidingUpDetailView",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "components/SlidingUpDetailView/SlidingUpDetailView.js~SlidingUpDetailView#navigateButtonOnPress",
    "access": "public",
    "description": "communicate with app component when start/cancel navigation button is pressed",
    "lineNumber": 83,
    "params": [],
    "return": null
  },
  {
    "__docId__": 279,
    "kind": "method",
    "name": "feedbackButtonOnPress",
    "memberof": "components/SlidingUpDetailView/SlidingUpDetailView.js~SlidingUpDetailView",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "components/SlidingUpDetailView/SlidingUpDetailView.js~SlidingUpDetailView#feedbackButtonOnPress",
    "access": "public",
    "description": "onPress listener for the feedback button",
    "lineNumber": 93,
    "params": [],
    "return": null
  },
  {
    "__docId__": 280,
    "kind": "method",
    "name": "setNavigate",
    "memberof": "components/SlidingUpDetailView/SlidingUpDetailView.js~SlidingUpDetailView",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "components/SlidingUpDetailView/SlidingUpDetailView.js~SlidingUpDetailView#setNavigate",
    "access": "public",
    "description": "set this.state.navigation\nif state === false, also close the sliding up view",
    "lineNumber": 108,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "state",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 281,
    "kind": "method",
    "name": "render",
    "memberof": "components/SlidingUpDetailView/SlidingUpDetailView.js~SlidingUpDetailView",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "components/SlidingUpDetailView/SlidingUpDetailView.js~SlidingUpDetailView#render",
    "access": "public",
    "description": null,
    "lineNumber": 119,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 282,
    "kind": "member",
    "name": "detailView",
    "memberof": "components/SlidingUpDetailView/SlidingUpDetailView.js~SlidingUpDetailView",
    "static": false,
    "longname": "components/SlidingUpDetailView/SlidingUpDetailView.js~SlidingUpDetailView#detailView",
    "access": "public",
    "description": null,
    "lineNumber": 126,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 284,
    "kind": "class",
    "name": "StatusLabel",
    "memberof": "components/SlidingUpDetailView/SlidingUpDetailView.js",
    "static": true,
    "longname": "components/SlidingUpDetailView/SlidingUpDetailView.js~StatusLabel",
    "access": "public",
    "export": false,
    "importPath": "ReactNativeTest/components/SlidingUpDetailView/SlidingUpDetailView.js",
    "importStyle": null,
    "description": "separate component for the status label displaying the current status of the pedway entrance\nif the status of the pedway is not requested yet, we need to render a blank rounded rectangle for placeholder",
    "lineNumber": 202,
    "interface": false,
    "extends": [
      "react~Component"
    ],
    "ignore": true
  },
  {
    "__docId__": 285,
    "kind": "method",
    "name": "render",
    "memberof": "components/SlidingUpDetailView/SlidingUpDetailView.js~StatusLabel",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "components/SlidingUpDetailView/SlidingUpDetailView.js~StatusLabel#render",
    "access": "public",
    "description": null,
    "lineNumber": 203,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 286,
    "kind": "file",
    "name": "components/SlidingUpDetailView/styles.js",
    "content": "import {StyleSheet} from 'react-native';\n\nexport default StyleSheet.create({\n  backgroundView: {\n    position: 'relative',\n    flex: 1,\n    flexDirection: 'column',\n    backgroundColor: 'white',\n    // borderTopRightRadius: 10,\n    // borderTopLeftRadius: 10,\n    height: 150,\n    zIndex: 100000,\n  },\n  aboveFlexContainer: {\n    height: 80,\n    backgroundColor: 'white',\n  },\n  belowFlexContainer: {\n    height: 70,\n    backgroundColor: 'white',\n  },\n  belowFlex: {\n    flex: 1,\n    flexDirection: 'row',\n  },\n  entranceLabel: {\n    position: 'absolute',\n    top: 20,\n    left: 30,\n    fontSize: 30,\n    width: 300,\n    color: '#222',\n  },\n  routeButtonContainer: {\n    flex: 1,\n    alignItems: 'flex-end',\n  },\n  routeBackgroundContainer: {\n    top: 20,\n    marginRight: 40,\n  },\n  routeButton: {\n    fontSize: 40,\n  },\n  feedbackBackgroundContainer: {\n    top: 0,\n    marginRight: 50,\n  },\n  feedbackButton: {\n    fontSize: 20,\n  },\n  statusLabelContainer: {\n    borderRadius: 5,\n    marginLeft: 30,\n    height: 30,\n  },\n  statusLabelGreen: {\n    backgroundColor: '#59b60f',\n  },\n  statusLabelRed: {\n    backgroundColor: '#f44242',\n  },\n  statusLabelGrey: {\n    backgroundColor: '#888',\n  },\n  statusLabelText: {\n    fontSize: 17,\n    padding: 4,\n    color: '#fff',\n  },\n  coordinateText: {\n    color: '#999',\n    fontSize: 13,\n    marginLeft: 30,\n  },\n});\n",
    "static": true,
    "longname": "/Users/arivval/Documents/Courseworks/CS428/pedway4/pedway/pedwayApp/components/SlidingUpDetailView/styles.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 287,
    "kind": "file",
    "name": "components/model/PedwayAttraction.js",
    "content": "/**\n * Model to save coordinates representing Pedway attractions\n */\nexport default class PedwayAttraction {\n  /**\n     * Constructor for PedwayAttraction\n     * @param {PedwayCoordinate} inputCoordinate\n     * @param {string} name\n     */\n  constructor(inputCoordinate, name = '', hours = '') {\n    this.coordinate = inputCoordinate;\n    this.name = name;\n    this.hours = hours;\n  }\n\n  /**\n     * Getter for a coordinate\n     * @return {PedwayCoordinate}\n     */\n  getCoordinate() {\n    return this.coordinate;\n  }\n\n  /**\n     * Get coordinate JSON data\n     * @return {JSON}\n     */\n  getJSON() {\n    return ({\n      coordinate: this.coordinate.getJSON(),\n    });\n  }\n\n  /**\n     * Setter for a coordinate\n     * @param {PedwayCoordinate} inputCoordinate\n     */\n  setCoordinate(inputCoordinate) {\n    this.coordinate = inputCoordinate;\n  }\n\n  /**\n     * Setter for the name of the attraction\n     * @param {string} name\n     */\n  setName(name) {\n    this.name = name;\n  }\n\n  /**\n     * Getter for the name of the attraction\n     * @return {string} name\n     */\n  getName() {\n    return this.name;\n  }\n\n  /**\n   * Setter for the hours of the attraction\n   * @param {string} hours\n   */\n  setHours(hours) {\n    this.hours = hours;\n  }\n\n  /**\n   * Getter for the hours of the attraction\n   * @return {string} hours\n   */\n  getHours() {\n    return this.hours;\n  }\n}\n\n",
    "static": true,
    "longname": "/Users/arivval/Documents/Courseworks/CS428/pedway4/pedway/pedwayApp/components/model/PedwayAttraction.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 288,
    "kind": "class",
    "name": "PedwayAttraction",
    "memberof": "components/model/PedwayAttraction.js",
    "static": true,
    "longname": "components/model/PedwayAttraction.js~PedwayAttraction",
    "access": "public",
    "export": true,
    "importPath": "ReactNativeTest/components/model/PedwayAttraction.js",
    "importStyle": "PedwayAttraction",
    "description": "Model to save coordinates representing Pedway attractions",
    "lineNumber": 4,
    "interface": false
  },
  {
    "__docId__": 289,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "components/model/PedwayAttraction.js~PedwayAttraction",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "components/model/PedwayAttraction.js~PedwayAttraction#constructor",
    "access": "public",
    "description": "Constructor for PedwayAttraction",
    "lineNumber": 10,
    "params": [
      {
        "nullable": null,
        "types": [
          "PedwayCoordinate"
        ],
        "spread": false,
        "optional": false,
        "name": "inputCoordinate",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": ""
      }
    ]
  },
  {
    "__docId__": 290,
    "kind": "member",
    "name": "coordinate",
    "memberof": "components/model/PedwayAttraction.js~PedwayAttraction",
    "static": false,
    "longname": "components/model/PedwayAttraction.js~PedwayAttraction#coordinate",
    "access": "public",
    "description": null,
    "lineNumber": 11,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 291,
    "kind": "member",
    "name": "name",
    "memberof": "components/model/PedwayAttraction.js~PedwayAttraction",
    "static": false,
    "longname": "components/model/PedwayAttraction.js~PedwayAttraction#name",
    "access": "public",
    "description": null,
    "lineNumber": 12,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 292,
    "kind": "member",
    "name": "hours",
    "memberof": "components/model/PedwayAttraction.js~PedwayAttraction",
    "static": false,
    "longname": "components/model/PedwayAttraction.js~PedwayAttraction#hours",
    "access": "public",
    "description": null,
    "lineNumber": 13,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 293,
    "kind": "method",
    "name": "getCoordinate",
    "memberof": "components/model/PedwayAttraction.js~PedwayAttraction",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "components/model/PedwayAttraction.js~PedwayAttraction#getCoordinate",
    "access": "public",
    "description": "Getter for a coordinate",
    "lineNumber": 20,
    "return": {
      "nullable": null,
      "types": [
        "PedwayCoordinate"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 294,
    "kind": "method",
    "name": "getJSON",
    "memberof": "components/model/PedwayAttraction.js~PedwayAttraction",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "components/model/PedwayAttraction.js~PedwayAttraction#getJSON",
    "access": "public",
    "description": "Get coordinate JSON data",
    "lineNumber": 28,
    "return": {
      "nullable": null,
      "types": [
        "JSON"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 295,
    "kind": "method",
    "name": "setCoordinate",
    "memberof": "components/model/PedwayAttraction.js~PedwayAttraction",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "components/model/PedwayAttraction.js~PedwayAttraction#setCoordinate",
    "access": "public",
    "description": "Setter for a coordinate",
    "lineNumber": 38,
    "params": [
      {
        "nullable": null,
        "types": [
          "PedwayCoordinate"
        ],
        "spread": false,
        "optional": false,
        "name": "inputCoordinate",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 297,
    "kind": "method",
    "name": "setName",
    "memberof": "components/model/PedwayAttraction.js~PedwayAttraction",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "components/model/PedwayAttraction.js~PedwayAttraction#setName",
    "access": "public",
    "description": "Setter for the name of the attraction",
    "lineNumber": 46,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 299,
    "kind": "method",
    "name": "getName",
    "memberof": "components/model/PedwayAttraction.js~PedwayAttraction",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "components/model/PedwayAttraction.js~PedwayAttraction#getName",
    "access": "public",
    "description": "Getter for the name of the attraction",
    "lineNumber": 54,
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "name"
    },
    "params": []
  },
  {
    "__docId__": 300,
    "kind": "method",
    "name": "setHours",
    "memberof": "components/model/PedwayAttraction.js~PedwayAttraction",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "components/model/PedwayAttraction.js~PedwayAttraction#setHours",
    "access": "public",
    "description": "Setter for the hours of the attraction",
    "lineNumber": 62,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "hours",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 302,
    "kind": "method",
    "name": "getHours",
    "memberof": "components/model/PedwayAttraction.js~PedwayAttraction",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "components/model/PedwayAttraction.js~PedwayAttraction#getHours",
    "access": "public",
    "description": "Getter for the hours of the attraction",
    "lineNumber": 70,
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "hours"
    },
    "params": []
  },
  {
    "__docId__": 303,
    "kind": "file",
    "name": "components/model/PedwayCoordinate.js",
    "content": "/**\n * model that defines coordinates in the pedway\n * we are only save latitude and longitude for now\n */\nexport default class PedwayCoordinate {\n  /**\n   * constructor for this class\n   * @param {float} latitude saves the latitude\n   * @param {float} longitude saves the longitude\n   */\n  constructor(latitude, longitude) {\n    this.latitude = latitude;\n    this.longitude = longitude;\n  }\n\n  /**\n   * get the latitude for this coordinate\n   * @return {float}\n   */\n  getLatitude() {\n    return this.latitude;\n  }\n\n  /**\n   * get the longitude for this coordinate\n   * @return {float}\n   */\n  getLongitude() {\n    return this.longitude;\n  }\n\n  /**\n   * get the longitude for this coordinate in JSON form\n   * @return {JSON}\n   */\n  getJSON() {\n    return {latitude: this.getLatitude(), longitude: this.getLongitude()};\n  }\n\n  /**\n   * set the coordinate to\n   * @param {float} latitude saves the latitude\n   * @param {float} longitude saves the longitude\n   */\n  setCoordinates(latitude, longitude) {\n    this.latitude = latitude;\n    this.longitude = longitude;\n  }\n}\n",
    "static": true,
    "longname": "/Users/arivval/Documents/Courseworks/CS428/pedway4/pedway/pedwayApp/components/model/PedwayCoordinate.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 304,
    "kind": "class",
    "name": "PedwayCoordinate",
    "memberof": "components/model/PedwayCoordinate.js",
    "static": true,
    "longname": "components/model/PedwayCoordinate.js~PedwayCoordinate",
    "access": "public",
    "export": true,
    "importPath": "ReactNativeTest/components/model/PedwayCoordinate.js",
    "importStyle": "PedwayCoordinate",
    "description": "model that defines coordinates in the pedway\nwe are only save latitude and longitude for now",
    "lineNumber": 5,
    "interface": false
  },
  {
    "__docId__": 305,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "components/model/PedwayCoordinate.js~PedwayCoordinate",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "components/model/PedwayCoordinate.js~PedwayCoordinate#constructor",
    "access": "public",
    "description": "constructor for this class",
    "lineNumber": 11,
    "params": [
      {
        "nullable": null,
        "types": [
          "float"
        ],
        "spread": false,
        "optional": false,
        "name": "latitude",
        "description": "saves the latitude"
      },
      {
        "nullable": null,
        "types": [
          "float"
        ],
        "spread": false,
        "optional": false,
        "name": "longitude",
        "description": "saves the longitude"
      }
    ]
  },
  {
    "__docId__": 306,
    "kind": "member",
    "name": "latitude",
    "memberof": "components/model/PedwayCoordinate.js~PedwayCoordinate",
    "static": false,
    "longname": "components/model/PedwayCoordinate.js~PedwayCoordinate#latitude",
    "access": "public",
    "description": null,
    "lineNumber": 12,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 307,
    "kind": "member",
    "name": "longitude",
    "memberof": "components/model/PedwayCoordinate.js~PedwayCoordinate",
    "static": false,
    "longname": "components/model/PedwayCoordinate.js~PedwayCoordinate#longitude",
    "access": "public",
    "description": null,
    "lineNumber": 13,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 308,
    "kind": "method",
    "name": "getLatitude",
    "memberof": "components/model/PedwayCoordinate.js~PedwayCoordinate",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "components/model/PedwayCoordinate.js~PedwayCoordinate#getLatitude",
    "access": "public",
    "description": "get the latitude for this coordinate",
    "lineNumber": 20,
    "return": {
      "nullable": null,
      "types": [
        "float"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 309,
    "kind": "method",
    "name": "getLongitude",
    "memberof": "components/model/PedwayCoordinate.js~PedwayCoordinate",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "components/model/PedwayCoordinate.js~PedwayCoordinate#getLongitude",
    "access": "public",
    "description": "get the longitude for this coordinate",
    "lineNumber": 28,
    "return": {
      "nullable": null,
      "types": [
        "float"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 310,
    "kind": "method",
    "name": "getJSON",
    "memberof": "components/model/PedwayCoordinate.js~PedwayCoordinate",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "components/model/PedwayCoordinate.js~PedwayCoordinate#getJSON",
    "access": "public",
    "description": "get the longitude for this coordinate in JSON form",
    "lineNumber": 36,
    "return": {
      "nullable": null,
      "types": [
        "JSON"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 311,
    "kind": "method",
    "name": "setCoordinates",
    "memberof": "components/model/PedwayCoordinate.js~PedwayCoordinate",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "components/model/PedwayCoordinate.js~PedwayCoordinate#setCoordinates",
    "access": "public",
    "description": "set the coordinate to",
    "lineNumber": 45,
    "params": [
      {
        "nullable": null,
        "types": [
          "float"
        ],
        "spread": false,
        "optional": false,
        "name": "latitude",
        "description": "saves the latitude"
      },
      {
        "nullable": null,
        "types": [
          "float"
        ],
        "spread": false,
        "optional": false,
        "name": "longitude",
        "description": "saves the longitude"
      }
    ],
    "return": null
  },
  {
    "__docId__": 314,
    "kind": "file",
    "name": "components/model/PedwayEntrance.js",
    "content": "/**\n * model to save a coordinates and status representing pedway entrance\n * the whole pedway is represented with a list of PedwaySections\n */\nexport default class PedwayEntrance {\n  /**\n   * constructor for this class\n   * @param {PedwayCoordinate} inputCoordinate\n   * @param {string} status\n   * @param {boolean} elevator\n   * @param {string} name\n   */\n  constructor(inputCoordinate, status, elevator = false, name = '') {\n    this.coordinate = inputCoordinate;\n    this.status = status;\n    this.elevator = elevator;\n    this.name = name;\n  }\n\n  /**\n   * get the coordinate\n   * @return {PedwayCoordinate}\n   */\n  getCoordinate() {\n    return this.coordinate;\n  }\n\n  /**\n   * get the status\n   * @return {string}\n   */\n  getStatus() {\n    return this.status;\n  }\n\n  /**\n   * get if we have elevator in this entrance\n   * @return {boolean}\n   */\n  getElevatorAvailability() {\n    return this.elevator;\n  }\n\n  /**\n   * get an array of coordinates in JSON\n   * @return {JSON}\n   */\n  getJSON() {\n    return ({\n      coordinate: this.coordinate.getJSON(),\n      status: this.status,\n      elevator: this.elevator,\n    });\n  }\n\n  /**\n   * update the coordinate\n   * @param {PedwayCoordinate} inputCoordinate\n   */\n  setCoordinate(inputCoordinate) {\n    this.coordinate = inputCoordinate;\n  }\n\n  /**\n   * update the status\n   * @param {string} status\n   */\n  setStatus(status) {\n    this.status = status;\n  }\n\n  /**\n   * update the elevator availability\n   * @param {boolean} elevator\n   */\n  setElevator(elevator) {\n    this.elevator = elevator;\n  }\n\n  /**\n   * update the name for this entrance\n   * @param {string} name of this entrance\n   */\n  setName(name) {\n    this.name = name;\n  }\n\n  /**\n   * get the name for this entrance\n   * @return {string}\n   */\n  getName() {\n    return this.name;\n  }\n}\n",
    "static": true,
    "longname": "/Users/arivval/Documents/Courseworks/CS428/pedway4/pedway/pedwayApp/components/model/PedwayEntrance.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 315,
    "kind": "class",
    "name": "PedwayEntrance",
    "memberof": "components/model/PedwayEntrance.js",
    "static": true,
    "longname": "components/model/PedwayEntrance.js~PedwayEntrance",
    "access": "public",
    "export": true,
    "importPath": "ReactNativeTest/components/model/PedwayEntrance.js",
    "importStyle": "PedwayEntrance",
    "description": "model to save a coordinates and status representing pedway entrance\nthe whole pedway is represented with a list of PedwaySections",
    "lineNumber": 5,
    "interface": false
  },
  {
    "__docId__": 316,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "components/model/PedwayEntrance.js~PedwayEntrance",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "components/model/PedwayEntrance.js~PedwayEntrance#constructor",
    "access": "public",
    "description": "constructor for this class",
    "lineNumber": 13,
    "params": [
      {
        "nullable": null,
        "types": [
          "PedwayCoordinate"
        ],
        "spread": false,
        "optional": false,
        "name": "inputCoordinate",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "status",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "elevator",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": ""
      }
    ]
  },
  {
    "__docId__": 317,
    "kind": "member",
    "name": "coordinate",
    "memberof": "components/model/PedwayEntrance.js~PedwayEntrance",
    "static": false,
    "longname": "components/model/PedwayEntrance.js~PedwayEntrance#coordinate",
    "access": "public",
    "description": null,
    "lineNumber": 14,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 318,
    "kind": "member",
    "name": "status",
    "memberof": "components/model/PedwayEntrance.js~PedwayEntrance",
    "static": false,
    "longname": "components/model/PedwayEntrance.js~PedwayEntrance#status",
    "access": "public",
    "description": null,
    "lineNumber": 15,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 319,
    "kind": "member",
    "name": "elevator",
    "memberof": "components/model/PedwayEntrance.js~PedwayEntrance",
    "static": false,
    "longname": "components/model/PedwayEntrance.js~PedwayEntrance#elevator",
    "access": "public",
    "description": null,
    "lineNumber": 16,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 320,
    "kind": "member",
    "name": "name",
    "memberof": "components/model/PedwayEntrance.js~PedwayEntrance",
    "static": false,
    "longname": "components/model/PedwayEntrance.js~PedwayEntrance#name",
    "access": "public",
    "description": null,
    "lineNumber": 17,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 321,
    "kind": "method",
    "name": "getCoordinate",
    "memberof": "components/model/PedwayEntrance.js~PedwayEntrance",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "components/model/PedwayEntrance.js~PedwayEntrance#getCoordinate",
    "access": "public",
    "description": "get the coordinate",
    "lineNumber": 24,
    "return": {
      "nullable": null,
      "types": [
        "PedwayCoordinate"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 322,
    "kind": "method",
    "name": "getStatus",
    "memberof": "components/model/PedwayEntrance.js~PedwayEntrance",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "components/model/PedwayEntrance.js~PedwayEntrance#getStatus",
    "access": "public",
    "description": "get the status",
    "lineNumber": 32,
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 323,
    "kind": "method",
    "name": "getElevatorAvailability",
    "memberof": "components/model/PedwayEntrance.js~PedwayEntrance",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "components/model/PedwayEntrance.js~PedwayEntrance#getElevatorAvailability",
    "access": "public",
    "description": "get if we have elevator in this entrance",
    "lineNumber": 40,
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 324,
    "kind": "method",
    "name": "getJSON",
    "memberof": "components/model/PedwayEntrance.js~PedwayEntrance",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "components/model/PedwayEntrance.js~PedwayEntrance#getJSON",
    "access": "public",
    "description": "get an array of coordinates in JSON",
    "lineNumber": 48,
    "return": {
      "nullable": null,
      "types": [
        "JSON"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 325,
    "kind": "method",
    "name": "setCoordinate",
    "memberof": "components/model/PedwayEntrance.js~PedwayEntrance",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "components/model/PedwayEntrance.js~PedwayEntrance#setCoordinate",
    "access": "public",
    "description": "update the coordinate",
    "lineNumber": 60,
    "params": [
      {
        "nullable": null,
        "types": [
          "PedwayCoordinate"
        ],
        "spread": false,
        "optional": false,
        "name": "inputCoordinate",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 327,
    "kind": "method",
    "name": "setStatus",
    "memberof": "components/model/PedwayEntrance.js~PedwayEntrance",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "components/model/PedwayEntrance.js~PedwayEntrance#setStatus",
    "access": "public",
    "description": "update the status",
    "lineNumber": 68,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "status",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 329,
    "kind": "method",
    "name": "setElevator",
    "memberof": "components/model/PedwayEntrance.js~PedwayEntrance",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "components/model/PedwayEntrance.js~PedwayEntrance#setElevator",
    "access": "public",
    "description": "update the elevator availability",
    "lineNumber": 76,
    "params": [
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "elevator",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 331,
    "kind": "method",
    "name": "setName",
    "memberof": "components/model/PedwayEntrance.js~PedwayEntrance",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "components/model/PedwayEntrance.js~PedwayEntrance#setName",
    "access": "public",
    "description": "update the name for this entrance",
    "lineNumber": 84,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": "of this entrance"
      }
    ],
    "return": null
  },
  {
    "__docId__": 333,
    "kind": "method",
    "name": "getName",
    "memberof": "components/model/PedwayEntrance.js~PedwayEntrance",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "components/model/PedwayEntrance.js~PedwayEntrance#getName",
    "access": "public",
    "description": "get the name for this entrance",
    "lineNumber": 92,
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 334,
    "kind": "file",
    "name": "components/model/PedwaySection.js",
    "content": "/**\n * model to save a list of coordinates representing a section of the pedway\n * the whole pedway is represented with a list of PedwaySections\n */\nexport default class PedwaySection {\n  /**\n   * constructor for this class\n   * @param {Array} inputCoordinates\n   */\n  constructor(inputCoordinates = []) {\n    this.coordinates = inputCoordinates;\n  }\n\n  /**\n   * get an array of coordinates\n   * @return {Array}\n   */\n  getCoordinates() {\n    return this.coordinates;\n  }\n\n  /**\n   * get an array of coordinates in JSON\n   * @return {Array}\n   */\n  getJSONList() {\n    let retVal = [];\n    retVal = [];\n    this.coordinates.forEach((item) => {\n      retVal.push(item.getJSON());\n    });\n    return retVal;\n  }\n\n  /**\n   * set the section to\n   * @param {Array} inputCoordinates\n   */\n  setCoordinates(inputCoordinates) {\n    this.coordinates = inputCoordinates;\n  }\n}\n",
    "static": true,
    "longname": "/Users/arivval/Documents/Courseworks/CS428/pedway4/pedway/pedwayApp/components/model/PedwaySection.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 335,
    "kind": "class",
    "name": "PedwaySection",
    "memberof": "components/model/PedwaySection.js",
    "static": true,
    "longname": "components/model/PedwaySection.js~PedwaySection",
    "access": "public",
    "export": true,
    "importPath": "ReactNativeTest/components/model/PedwaySection.js",
    "importStyle": "PedwaySection",
    "description": "model to save a list of coordinates representing a section of the pedway\nthe whole pedway is represented with a list of PedwaySections",
    "lineNumber": 5,
    "interface": false
  },
  {
    "__docId__": 336,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "components/model/PedwaySection.js~PedwaySection",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "components/model/PedwaySection.js~PedwaySection#constructor",
    "access": "public",
    "description": "constructor for this class",
    "lineNumber": 10,
    "params": [
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "inputCoordinates",
        "description": ""
      }
    ]
  },
  {
    "__docId__": 337,
    "kind": "member",
    "name": "coordinates",
    "memberof": "components/model/PedwaySection.js~PedwaySection",
    "static": false,
    "longname": "components/model/PedwaySection.js~PedwaySection#coordinates",
    "access": "public",
    "description": null,
    "lineNumber": 11,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 338,
    "kind": "method",
    "name": "getCoordinates",
    "memberof": "components/model/PedwaySection.js~PedwaySection",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "components/model/PedwaySection.js~PedwaySection#getCoordinates",
    "access": "public",
    "description": "get an array of coordinates",
    "lineNumber": 18,
    "return": {
      "nullable": null,
      "types": [
        "Array"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 339,
    "kind": "method",
    "name": "getJSONList",
    "memberof": "components/model/PedwaySection.js~PedwaySection",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "components/model/PedwaySection.js~PedwaySection#getJSONList",
    "access": "public",
    "description": "get an array of coordinates in JSON",
    "lineNumber": 26,
    "return": {
      "nullable": null,
      "types": [
        "Array"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 340,
    "kind": "method",
    "name": "setCoordinates",
    "memberof": "components/model/PedwaySection.js~PedwaySection",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "components/model/PedwaySection.js~PedwaySection#setCoordinates",
    "access": "public",
    "description": "set the section to",
    "lineNumber": 39,
    "params": [
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "inputCoordinates",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "kind": "index",
    "content": "# How to deploy the pedwayApp\n\n- Install Android SDK [here](https://developer.android.com/studio/)\n- Install WebStorm [here](https://www.jetbrains.com/webstorm/), or your favorite JavaScript IDE/editor\n- Install React Native CLI:\n```console\n$ npm install -g react-native-cli\n```\n- Set the sdk.dir in /pedwayApp/android/local.properties to the Android sdk's directory on your own machine\n- Add an Android configuration in WebStorm and run it, or execute:\n- Grant location permission for this app in Setting -> Location Services -> App-level-permission-> Chicago Pedway\n```console\n$ react-native run-android\n```\n- You can setup the environment variables by creating a .env file in the root directory\n# Trouble Shooting\n\n\n#### Error No.1:\n```\nCommand failed: ./gradlew installDebug\n```\n**Solution:** Downgrade react native and reinstall node. Run the following:\n```\n$ npm install react-native@0.57.3\n```\nIf you don't reinstall Node you will encounter the following error:\n```\ninternal/modules/cjs/loader.js:583 \n    throw err;\n```\nSo reinstall Node:\n```\n$ rm -rf node_modules\n$ npm install\n```\n\n#### Error No.2:\n```\nException in thread \"main\" java.lang.NoClassDefFoundError: javax/xml/bind/annotation/XmlSchema\n```\nor\n```\nCould not create service of type ScriptPluginFactory using BuildScopeServices.createScriptPluginFactory()\n```\n**Solution:** Install or switch to Java 8. The following command will display a list of all the java versions that you installed.\n```\n$ /usr/libexec/java_home -V\n```\nYou will get something like this:\n```\n$ /usr/libexec/java_home -V\nMatching Java Virtual Machines (2):\n    11.0.1, x86_64:     \"Java SE 11.0.1\"        /Library/Java/JavaVirtualMachines/jdk-11.0.1.jdk/Contents/Home\n    1.8.0_181, x86_64:  \"Java SE 8\"     /Library/Java/JavaVirtualMachines/jdk1.8.0_181.jdk/Contents/Home\n\n/Library/Java/JavaVirtualMachines/jdk-11.0.1.jdk/Contents/Home\n```\nPick Java 8 and export JAVA_HOME:\n```\n$ export JAVA_HOME=`/usr/libexec/java_home -v 1.8.0_181`\n```\n\n#### Error No.3:\n```\nSDK location not found. Define location with sdk.dir in the local.properties file or with an ANDROID_HOME environment variable.\n```\nYou will first need to know where is your sdk directory. For mac, it is usually /Users/<USERNAME>/Library/Android/sdk\n\n**Solution 1:** Set ANDROID_HOME env variable. Run the following to edit your .bash_profile:\n```\n$ cd ~/\n$ sudo vim .bash_profile\n```\nInsert the following three lines:\n```\nexport ANDROID_HOME=/Users/<USERNAME>/Library/Android/sdk\nexport PATH=$ANDROID_HOME/platform-tools:$PATH\nexport PATH=$ANDROID_HOME/tools:$PATH\n```\nRun the following to check if it works:\n```\n$ source ~/.bash_profile\n$ echo $ANDROID_HOME\n```\n\n**Solution 2:** Create and modify local.properties in side your project/android folder.\n```\n$ cd project_folder/android\n$ vim local.properties\n```\nIn local.properties insert: \n```\nsdk.dir = /Users/<USERNAME>/Library/Android/sdk\n```\n\n#### Error No.4:\n```\nFailed to install the following Android SDK packages as some licences have not been accepted.\n```\n**Solution:** cd to your sdk folder and use sdkmanager to accept all the licences.\n```\n$ cd /Users/<USERNAME>/Library/Android/sdk/tools/bin/\n$ ./sdkmanager --licenses\n```\n\n#### Error No.5:\n```\n/bin/sh: 1: adb: not found\n```\n\n**Solution:** Install adb \n```\n$ brew cask install android-platform-tools\n```\nif it still does not work, add the line to your .bash_profile:\n```\nexport PATH=\"/Users/<USERNAME>/Library/Android/sdk/platform-tools\":$PATH\n```\n\n#### Error No.6:\n```\nA problem occurred evaluating root project 'ReactNativeTest'.\n```\n\n**Solution:** In your build.gradle: \n```\ndependencies {\n        classpath 'com.android.tools.build:gradle:3.2.1'\n\n        // NOTE: Do not place your application dependencies here; they belong\n        // in the individual module build.gradle files\n    }\n```\n\n#### Error No.7:\n```\nCannot add task 'wrapper' as a task with that name already exists\n```\n\n**Solution:** In your android/gradle/wrapper/gradle-wrapper.properties:\n```\ndistributionBase=GRADLE_USER_HOME\ndistributionPath=wrapper/dists\nzipStoreBase=GRADLE_USER_HOME\nzipStorePath=wrapper/dists\ndistributionUrl=https\\://services.gradle.org/distributions/gradle-5.0-all.zip\n```\nComment the following lines in build.gradle:\n```\ntask wrapper(type: Wrapper) {\n    gradleVersion = '4.7'\n    distributionUrl = distributionUrl.replace(\"bin\", \"all\")\n}\n```\n\n\n",
    "longname": "/Users/arivval/Documents/Courseworks/CS428/pedway4/pedway/pedwayApp/README.md",
    "name": "./README.md",
    "static": true,
    "access": "public"
  },
  {
    "kind": "packageJSON",
    "content": "{\n  \"name\": \"ReactNativeTest\",\n  \"version\": \"0.0.1\",\n  \"private\": true,\n  \"scripts\": {\n    \"start\": \"node node_modules/react-native/local-cli/cli.js start\",\n    \"test\": \"jest\",\n    \"lint\": \"gulp lint\"\n  },\n  \"dependencies\": {\n    \"@turf/distance\": \"^6.0.1\",\n    \"@turf/helpers\": \"^6.1.4\",\n    \"@turf/point-to-line-distance\": \"^6.0.0\",\n    \"@turf/turf\": \"^5.1.6\",\n    \"appcenter\": \"1.12.0\",\n    \"appcenter-analytics\": \"1.12.0\",\n    \"appcenter-crashes\": \"1.12.0\",\n    \"axios\": \"^0.18.0\",\n    \"babel-eslint\": \"^10.0.1\",\n    \"esdoc\": \"^1.1.0\",\n    \"esdoc-standard-plugin\": \"^1.0.0\",\n    \"google-polyline\": \"^1.0.3\",\n    \"isomorphic-fetch\": \"^2.2.1\",\n    \"jest-matcher-deep-close-to\": \"^1.3.0\",\n    \"lint\": \"^1.1.2\",\n    \"react\": \"16.6.3\",\n    \"react-native\": \"^0.58.5\",\n    \"react-native-action-button\": \"^2.8.5\",\n    \"react-native-gesture-handler\": \"^1.0.16\",\n    \"react-native-maps\": \"^0.23.0\",\n    \"react-native-popup-dialog\": \"^0.18.2\",\n    \"react-native-side-menu\": \"^1.1.3\",\n    \"react-native-swiper\": \"^1.5.14\",\n    \"react-native-vector-icons\": \"^6.3.0\",\n    \"react-navigation\": \"^3.3.2\",\n    \"rn-sliding-up-panel\": \"^2.0.2\"\n  },\n  \"devDependencies\": {\n    \"babel-core\": \"7.0.0-bridge.0\",\n    \"babel-jest\": \"24.1.0\",\n    \"babel-preset-react-native\": \"5.0.0\",\n    \"esdoc-jsx-plugin\": \"^1.0.0\",\n    \"eslint\": \"^5.14.1\",\n    \"eslint-config-google\": \"^0.12.0\",\n    \"file-system\": \"^2.2.2\",\n    \"gulp\": \"^4.0.0\",\n    \"gulp-eslint\": \"^5.0.0\",\n    \"jest\": \"^24.1.0\",\n    \"jest-junit\": \"^6.2.1\",\n    \"metro-react-native-babel-preset\": \"0.51.1\",\n    \"react-native-jest-mocks\": \"^1.4.0\",\n    \"react-test-renderer\": \"16.6.3\"\n  },\n  \"jest\": {\n    \"preset\": \"react-native\",\n    \"transformIgnorePatterns\": [\n      \"/node_modules/(?!react-native)/.+\"\n    ],\n    \"setupFiles\": [\n      \"./jest-setup.js\"\n    ],\n    \"reporters\": [\n      \"default\",\n      \"jest-junit\"\n    ]\n  },\n  \"eslintConfig\": {\n    \"parser\": \"babel-eslint\",\n    \"parserOptions\": {\n      \"sourceType\": \"module\"\n    },\n    \"rules\": {\n      \"linebreak-style\": \"off\",\n      \"require-jsdoc\": \"off\",\n      \"valid-jsdoc\": \"off\",\n      \"no-unused-vars\": \"off\",\n      \"max-len\": \"off\",\n      \"prefer-const\": \"off\"\n    },\n    \"extends\": \"google\",\n    \"env\": {\n      \"es6\": true\n    }\n  }\n}\n",
    "longname": "/Users/arivval/Documents/Courseworks/CS428/pedway4/pedway/pedwayApp/package.json",
    "name": "package.json",
    "static": true,
    "access": "public"
  }
]